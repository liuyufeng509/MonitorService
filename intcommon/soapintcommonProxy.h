/* soapintcommonProxy.h
   Generated by gSOAP 2.8.30 for BaseInterface.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapintcommonProxy_H
#define soapintcommonProxy_H
#include "soapH.h"

    class SOAP_CMAC intcommonProxy : public soap {
      public:
        /// Endpoint URL of service 'intcommonProxy' (change as needed)
        const char *soap_endpoint;
        /// Variables globally declared in BaseInterface.h, if any
        /// Construct a proxy with new managing context
        intcommonProxy();
        /// Copy constructor
        intcommonProxy(const intcommonProxy& rhs);
        /// Construct proxy given a managing context
        intcommonProxy(const struct soap&);
        /// Constructor taking an endpoint URL
        intcommonProxy(const char *endpoint);
        /// Constructor taking input and output mode flags for the new managing context
        intcommonProxy(soap_mode iomode);
        /// Constructor taking endpoint URL and input and output mode flags for the new managing context
        intcommonProxy(const char *endpoint, soap_mode iomode);
        /// Constructor taking input and output mode flags for the new managing context
        intcommonProxy(soap_mode imode, soap_mode omode);
        /// Destructor deletes deserialized data and managing context
        virtual ~intcommonProxy();
        /// Initializer used by constructors
        virtual void intcommonProxy_init(soap_mode imode, soap_mode omode);
        /// Return a copy that has a new managing context with the same engine state
        virtual intcommonProxy *copy() SOAP_PURE_VIRTUAL;
        /// Copy assignment
        intcommonProxy& operator=(const intcommonProxy&);
        /// Delete all deserialized data (uses soap_destroy() and soap_end())
        virtual void destroy();
        /// Delete all deserialized data and reset to default
        virtual void reset();
        /// Disables and removes SOAP Header from message by setting soap->header = NULL
        virtual void soap_noheader();
        /// Get SOAP Header structure (i.e. soap->header, which is NULL when absent)
        virtual ::SOAP_ENV__Header *soap_header();
        /// Get SOAP Fault structure (i.e. soap->fault, which is NULL when absent)
        virtual ::SOAP_ENV__Fault *soap_fault();
        /// Get SOAP Fault string (NULL when absent)
        virtual const char *soap_fault_string();
        /// Get SOAP Fault detail as string (NULL when absent)
        virtual const char *soap_fault_detail();
        /// Close connection (normally automatic, except for send_X ops)
        virtual int soap_close_socket();
        /// Force close connection (can kill a thread blocked on IO)
        virtual int soap_force_close_socket();
        /// Print fault
        virtual void soap_print_fault(FILE*);
    #ifndef WITH_LEAN
    #ifndef WITH_COMPAT
        /// Print fault to stream
        virtual void soap_stream_fault(std::ostream&);
    #endif
        /// Write fault to buffer
        virtual char *soap_sprint_fault(char *buf, size_t len);
    #endif
        /// Web service operation 'SwitchCameraToStream' (returns SOAP_OK or error code)
        virtual int SwitchCameraToStream(struct ns__HBUSERINFO nsUserInfo, long CamID, struct ns__HBNET_VIDEO_STREAM *Url)
        { return this->SwitchCameraToStream(NULL, NULL, nsUserInfo, CamID, Url); }
        virtual int SwitchCameraToStream(const char *soap_endpoint, const char *soap_action, struct ns__HBUSERINFO nsUserInfo, long CamID, struct ns__HBNET_VIDEO_STREAM *Url);
        /// Web service operation 'PTZCtrlCamera' (returns SOAP_OK or error code)
        virtual int PTZCtrlCamera(struct ns__HBUSERINFO nsUserInfo, long CamID, struct ns__HBNET_CAMERA_PTZCTRL *Data, struct ns__Response *Result)
        { return this->PTZCtrlCamera(NULL, NULL, nsUserInfo, CamID, Data, Result); }
        virtual int PTZCtrlCamera(const char *soap_endpoint, const char *soap_action, struct ns__HBUSERINFO nsUserInfo, long CamID, struct ns__HBNET_CAMERA_PTZCTRL *Data, struct ns__Response *Result);
        /// Web service operation 'AbandonCameraStream' (returns SOAP_OK or error code)
        virtual int AbandonCameraStream(struct ns__HBUSERINFO nsUserInfo, long CamID, struct ns__Response *Result)
        { return this->AbandonCameraStream(NULL, NULL, nsUserInfo, CamID, Result); }
        virtual int AbandonCameraStream(const char *soap_endpoint, const char *soap_action, struct ns__HBUSERINFO nsUserInfo, long CamID, struct ns__Response *Result);
        /// Web service operation 'QueryVideoRecord' (returns SOAP_OK or error code)
        virtual int QueryVideoRecord(struct ns__HBUSERINFO nsUserInfo, long CamID, struct ns__HBNET_RECOED_FILECOND *Param, char *&RecodeList)
        { return this->QueryVideoRecord(NULL, NULL, nsUserInfo, CamID, Param, RecodeList); }
        virtual int QueryVideoRecord(const char *soap_endpoint, const char *soap_action, struct ns__HBUSERINFO nsUserInfo, long CamID, struct ns__HBNET_RECOED_FILECOND *Param, char *&RecodeList);
        /// Web service operation 'PlayVideoRecord' (returns SOAP_OK or error code)
        virtual int PlayVideoRecord(struct ns__HBUSERINFO nsUserInfo, long CamID, struct ns__HBNET_VIDEO_STREAM *Data, struct ns__HBNET_VIDEO_STREAM_RESP *Out)
        { return this->PlayVideoRecord(NULL, NULL, nsUserInfo, CamID, Data, Out); }
        virtual int PlayVideoRecord(const char *soap_endpoint, const char *soap_action, struct ns__HBUSERINFO nsUserInfo, long CamID, struct ns__HBNET_VIDEO_STREAM *Data, struct ns__HBNET_VIDEO_STREAM_RESP *Out);
        /// Web service operation 'DownloadVideoRecord' (returns SOAP_OK or error code)
        virtual int DownloadVideoRecord(struct ns__HBUSERINFO nsUserInfo, long CamID, char *szFileName, char *&OutFileName)
        { return this->DownloadVideoRecord(NULL, NULL, nsUserInfo, CamID, szFileName, OutFileName); }
        virtual int DownloadVideoRecord(const char *soap_endpoint, const char *soap_action, struct ns__HBUSERINFO nsUserInfo, long CamID, char *szFileName, char *&OutFileName);
        /// Web service operation 'AbandonVideoRecord' (returns SOAP_OK or error code)
        virtual int AbandonVideoRecord(struct ns__HBUSERINFO nsUserInfo, long CamID, char *FileName, struct ns__Response *Result)
        { return this->AbandonVideoRecord(NULL, NULL, nsUserInfo, CamID, FileName, Result); }
        virtual int AbandonVideoRecord(const char *soap_endpoint, const char *soap_action, struct ns__HBUSERINFO nsUserInfo, long CamID, char *FileName, struct ns__Response *Result);
        /// Web service operation 'HeartBeat' (returns SOAP_OK or error code)
        virtual int HeartBeat(struct ns_HeartBeat nsHeartBeat, struct ns__Response *Result)
        { return this->HeartBeat(NULL, NULL, nsHeartBeat, Result); }
        virtual int HeartBeat(const char *soap_endpoint, const char *soap_action, struct ns_HeartBeat nsHeartBeat, struct ns__Response *Result);
        /// Web service operation 'AutoSysUpdate' (returns SOAP_OK or error code)
        virtual int AutoSysUpdate(std::string strXmlFile, struct ns__Response *Result)
        { return this->AutoSysUpdate(NULL, NULL, strXmlFile, Result); }
        virtual int AutoSysUpdate(const char *soap_endpoint, const char *soap_action, std::string strXmlFile, struct ns__Response *Result);
        /// Web service operation 'NetMaster' (returns SOAP_OK or error code)
        virtual int NetMaster(int nIsOK, int &nResult)
        { return this->NetMaster(NULL, NULL, nIsOK, nResult); }
        virtual int NetMaster(const char *soap_endpoint, const char *soap_action, int nIsOK, int &nResult);
        /// Web service operation 'HBOperate' (returns SOAP_OK or error code)
        virtual int HBOperate(char *szXml, char *&szXmlRes)
        { return this->HBOperate(NULL, NULL, szXml, szXmlRes); }
        virtual int HBOperate(const char *soap_endpoint, const char *soap_action, char *szXml, char *&szXmlRes);
    };
#endif

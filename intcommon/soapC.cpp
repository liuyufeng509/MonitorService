/* soapC.cpp
   Generated by gSOAP 2.8.30 for BaseInterface.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.30 2016-06-29 06:24:31 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_long:
		return soap_in_long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLong:
		return soap_in_unsignedLong(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_nsCXF__getDataCxfResponse:
		return soap_in_nsCXF__getDataCxfResponse(soap, NULL, NULL, "nsCXF:getDataCxfResponse");
	case SOAP_TYPE_nsCXF__getDataCxf:
		return soap_in_nsCXF__getDataCxf(soap, NULL, NULL, "nsCXF:getDataCxf");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns__HBOperate:
		return soap_in_ns__HBOperate(soap, NULL, NULL, "ns:HBOperate");
	case SOAP_TYPE_ns__HBOperateResponse:
		return soap_in_ns__HBOperateResponse(soap, NULL, NULL, "ns:HBOperateResponse");
	case SOAP_TYPE_ns__NetMaster:
		return soap_in_ns__NetMaster(soap, NULL, NULL, "ns:NetMaster");
	case SOAP_TYPE_ns__NetMasterResponse:
		return soap_in_ns__NetMasterResponse(soap, NULL, NULL, "ns:NetMasterResponse");
	case SOAP_TYPE_ns__AutoSysUpdate:
		return soap_in_ns__AutoSysUpdate(soap, NULL, NULL, "ns:AutoSysUpdate");
	case SOAP_TYPE_ns__HeartBeat:
		return soap_in_ns__HeartBeat(soap, NULL, NULL, "ns:HeartBeat");
	case SOAP_TYPE_ns__AbandonVideoRecord:
		return soap_in_ns__AbandonVideoRecord(soap, NULL, NULL, "ns:AbandonVideoRecord");
	case SOAP_TYPE_ns__DownloadVideoRecord:
		return soap_in_ns__DownloadVideoRecord(soap, NULL, NULL, "ns:DownloadVideoRecord");
	case SOAP_TYPE_ns__DownloadVideoRecordResponse:
		return soap_in_ns__DownloadVideoRecordResponse(soap, NULL, NULL, "ns:DownloadVideoRecordResponse");
	case SOAP_TYPE_ns__PlayVideoRecord:
		return soap_in_ns__PlayVideoRecord(soap, NULL, NULL, "ns:PlayVideoRecord");
	case SOAP_TYPE_ns__QueryVideoRecord:
		return soap_in_ns__QueryVideoRecord(soap, NULL, NULL, "ns:QueryVideoRecord");
	case SOAP_TYPE_ns__QueryVideoRecordResponse:
		return soap_in_ns__QueryVideoRecordResponse(soap, NULL, NULL, "ns:QueryVideoRecordResponse");
	case SOAP_TYPE_ns__AbandonCameraStream:
		return soap_in_ns__AbandonCameraStream(soap, NULL, NULL, "ns:AbandonCameraStream");
	case SOAP_TYPE_ns__PTZCtrlCamera:
		return soap_in_ns__PTZCtrlCamera(soap, NULL, NULL, "ns:PTZCtrlCamera");
	case SOAP_TYPE_ns__SwitchCameraToStream:
		return soap_in_ns__SwitchCameraToStream(soap, NULL, NULL, "ns:SwitchCameraToStream");
	case SOAP_TYPE_ns_HeartBeat:
		return soap_in_ns_HeartBeat(soap, NULL, NULL, "ns-HeartBeat");
	case SOAP_TYPE_ns__HBUSERINFO:
		return soap_in_ns__HBUSERINFO(soap, NULL, NULL, "ns:HBUSERINFO");
	case SOAP_TYPE_ns__HBNET_CAMREA_INFO:
		return soap_in_ns__HBNET_CAMREA_INFO(soap, NULL, NULL, "ns:HBNET-CAMREA-INFO");
	case SOAP_TYPE_ns__HBNET_RECOED_FILECOND:
		return soap_in_ns__HBNET_RECOED_FILECOND(soap, NULL, NULL, "ns:HBNET-RECOED-FILECOND");
	case SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL:
		return soap_in_ns__HBNET_RECOED_PLAYCTRL(soap, NULL, NULL, "ns:HBNET-RECOED-PLAYCTRL");
	case SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL:
		return soap_in_ns__HBNET_CAMERA_PTZCTRL(soap, NULL, NULL, "ns:HBNET-CAMERA-PTZCTRL");
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP:
		return soap_in_ns__HBNET_VIDEO_STREAM_RESP(soap, NULL, NULL, "ns:HBNET-VIDEO-STREAM-RESP");
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM:
		return soap_in_ns__HBNET_VIDEO_STREAM(soap, NULL, NULL, "ns:HBNET-VIDEO-STREAM");
	case SOAP_TYPE_ns__Response:
		return soap_in_ns__Response(soap, NULL, NULL, "ns:Response");
	case SOAP_TYPE_PointerTonsCXF__getDataCxfResponse:
		return soap_in_PointerTonsCXF__getDataCxfResponse(soap, NULL, NULL, "nsCXF:getDataCxfResponse");
	case SOAP_TYPE_PointerTonsCXF__getDataCxf:
		return soap_in_PointerTonsCXF__getDataCxf(soap, NULL, NULL, "nsCXF:getDataCxf");
	case SOAP_TYPE_PointerTo_ns1__getDataResponse:
		return soap_in_PointerTo_ns1__getDataResponse(soap, NULL, NULL, "ns1:getDataResponse");
	case SOAP_TYPE_PointerTo_ns1__getData:
		return soap_in_PointerTo_ns1__getData(soap, NULL, NULL, "ns1:getData");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTons__HBNET_VIDEO_STREAM_RESP:
		return soap_in_PointerTons__HBNET_VIDEO_STREAM_RESP(soap, NULL, NULL, "ns:HBNET-VIDEO-STREAM-RESP");
	case SOAP_TYPE_PointerTons__HBNET_RECOED_FILECOND:
		return soap_in_PointerTons__HBNET_RECOED_FILECOND(soap, NULL, NULL, "ns:HBNET-RECOED-FILECOND");
	case SOAP_TYPE_PointerTons__Response:
		return soap_in_PointerTons__Response(soap, NULL, NULL, "ns:Response");
	case SOAP_TYPE_PointerTons__HBNET_CAMERA_PTZCTRL:
		return soap_in_PointerTons__HBNET_CAMERA_PTZCTRL(soap, NULL, NULL, "ns:HBNET-CAMERA-PTZCTRL");
	case SOAP_TYPE_PointerTons__HBNET_VIDEO_STREAM:
		return soap_in_PointerTons__HBNET_VIDEO_STREAM(soap, NULL, NULL, "ns:HBNET-VIDEO-STREAM");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "nsCXF:getDataCxfResponse"))
		{	*type = SOAP_TYPE_nsCXF__getDataCxfResponse;
			return soap_in_nsCXF__getDataCxfResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "nsCXF:getDataCxf"))
		{	*type = SOAP_TYPE_nsCXF__getDataCxf;
			return soap_in_nsCXF__getDataCxf(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_long;
			return soap_in_long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_unsignedLong;
			return soap_in_unsignedLong(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBOperate"))
		{	*type = SOAP_TYPE_ns__HBOperate;
			return soap_in_ns__HBOperate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBOperateResponse"))
		{	*type = SOAP_TYPE_ns__HBOperateResponse;
			return soap_in_ns__HBOperateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:NetMaster"))
		{	*type = SOAP_TYPE_ns__NetMaster;
			return soap_in_ns__NetMaster(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:NetMasterResponse"))
		{	*type = SOAP_TYPE_ns__NetMasterResponse;
			return soap_in_ns__NetMasterResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:AutoSysUpdate"))
		{	*type = SOAP_TYPE_ns__AutoSysUpdate;
			return soap_in_ns__AutoSysUpdate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HeartBeat"))
		{	*type = SOAP_TYPE_ns__HeartBeat;
			return soap_in_ns__HeartBeat(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:AbandonVideoRecord"))
		{	*type = SOAP_TYPE_ns__AbandonVideoRecord;
			return soap_in_ns__AbandonVideoRecord(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:DownloadVideoRecord"))
		{	*type = SOAP_TYPE_ns__DownloadVideoRecord;
			return soap_in_ns__DownloadVideoRecord(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:DownloadVideoRecordResponse"))
		{	*type = SOAP_TYPE_ns__DownloadVideoRecordResponse;
			return soap_in_ns__DownloadVideoRecordResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:PlayVideoRecord"))
		{	*type = SOAP_TYPE_ns__PlayVideoRecord;
			return soap_in_ns__PlayVideoRecord(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryVideoRecord"))
		{	*type = SOAP_TYPE_ns__QueryVideoRecord;
			return soap_in_ns__QueryVideoRecord(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryVideoRecordResponse"))
		{	*type = SOAP_TYPE_ns__QueryVideoRecordResponse;
			return soap_in_ns__QueryVideoRecordResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:AbandonCameraStream"))
		{	*type = SOAP_TYPE_ns__AbandonCameraStream;
			return soap_in_ns__AbandonCameraStream(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:PTZCtrlCamera"))
		{	*type = SOAP_TYPE_ns__PTZCtrlCamera;
			return soap_in_ns__PTZCtrlCamera(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:SwitchCameraToStream"))
		{	*type = SOAP_TYPE_ns__SwitchCameraToStream;
			return soap_in_ns__SwitchCameraToStream(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns-HeartBeat"))
		{	*type = SOAP_TYPE_ns_HeartBeat;
			return soap_in_ns_HeartBeat(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBUSERINFO"))
		{	*type = SOAP_TYPE_ns__HBUSERINFO;
			return soap_in_ns__HBUSERINFO(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBNET-CAMREA-INFO"))
		{	*type = SOAP_TYPE_ns__HBNET_CAMREA_INFO;
			return soap_in_ns__HBNET_CAMREA_INFO(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBNET-RECOED-FILECOND"))
		{	*type = SOAP_TYPE_ns__HBNET_RECOED_FILECOND;
			return soap_in_ns__HBNET_RECOED_FILECOND(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBNET-RECOED-PLAYCTRL"))
		{	*type = SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL;
			return soap_in_ns__HBNET_RECOED_PLAYCTRL(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBNET-CAMERA-PTZCTRL"))
		{	*type = SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL;
			return soap_in_ns__HBNET_CAMERA_PTZCTRL(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBNET-VIDEO-STREAM-RESP"))
		{	*type = SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP;
			return soap_in_ns__HBNET_VIDEO_STREAM_RESP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:HBNET-VIDEO-STREAM"))
		{	*type = SOAP_TYPE_ns__HBNET_VIDEO_STREAM;
			return soap_in_ns__HBNET_VIDEO_STREAM(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Response"))
		{	*type = SOAP_TYPE_ns__Response;
			return soap_in_ns__Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:getDataResponse"))
		{	*type = SOAP_TYPE__ns1__getDataResponse;
			return soap_in__ns1__getDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getData"))
		{	*type = SOAP_TYPE__ns1__getData;
			return soap_in__ns1__getData(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				if (soap_ignore(soap) || soap_element_end_in(soap, NULL))
					return soap->error;
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_long:
		return soap_out_long(soap, tag, id, (const long *)ptr, "xsd:long");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLong:
		return soap_out_unsignedLong(soap, tag, id, (const unsigned long *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_nsCXF__getDataCxfResponse:
		return ((nsCXF__getDataCxfResponse *)ptr)->soap_out(soap, tag, id, "nsCXF:getDataCxfResponse");
	case SOAP_TYPE_nsCXF__getDataCxf:
		return ((nsCXF__getDataCxf *)ptr)->soap_out(soap, tag, id, "nsCXF:getDataCxf");
	case SOAP_TYPE__ns1__getDataResponse:
		return ((_ns1__getDataResponse *)ptr)->soap_out(soap, "ns1:getDataResponse", id, NULL);
	case SOAP_TYPE__ns1__getData:
		return ((_ns1__getData *)ptr)->soap_out(soap, "ns1:getData", id, NULL);
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns__HBOperate:
		return soap_out_ns__HBOperate(soap, tag, id, (const struct ns__HBOperate *)ptr, "ns:HBOperate");
	case SOAP_TYPE_ns__HBOperateResponse:
		return soap_out_ns__HBOperateResponse(soap, tag, id, (const struct ns__HBOperateResponse *)ptr, "ns:HBOperateResponse");
	case SOAP_TYPE_ns__NetMaster:
		return soap_out_ns__NetMaster(soap, tag, id, (const struct ns__NetMaster *)ptr, "ns:NetMaster");
	case SOAP_TYPE_ns__NetMasterResponse:
		return soap_out_ns__NetMasterResponse(soap, tag, id, (const struct ns__NetMasterResponse *)ptr, "ns:NetMasterResponse");
	case SOAP_TYPE_ns__AutoSysUpdate:
		return soap_out_ns__AutoSysUpdate(soap, tag, id, (const struct ns__AutoSysUpdate *)ptr, "ns:AutoSysUpdate");
	case SOAP_TYPE_ns__HeartBeat:
		return soap_out_ns__HeartBeat(soap, tag, id, (const struct ns__HeartBeat *)ptr, "ns:HeartBeat");
	case SOAP_TYPE_ns__AbandonVideoRecord:
		return soap_out_ns__AbandonVideoRecord(soap, tag, id, (const struct ns__AbandonVideoRecord *)ptr, "ns:AbandonVideoRecord");
	case SOAP_TYPE_ns__DownloadVideoRecord:
		return soap_out_ns__DownloadVideoRecord(soap, tag, id, (const struct ns__DownloadVideoRecord *)ptr, "ns:DownloadVideoRecord");
	case SOAP_TYPE_ns__DownloadVideoRecordResponse:
		return soap_out_ns__DownloadVideoRecordResponse(soap, tag, id, (const struct ns__DownloadVideoRecordResponse *)ptr, "ns:DownloadVideoRecordResponse");
	case SOAP_TYPE_ns__PlayVideoRecord:
		return soap_out_ns__PlayVideoRecord(soap, tag, id, (const struct ns__PlayVideoRecord *)ptr, "ns:PlayVideoRecord");
	case SOAP_TYPE_ns__QueryVideoRecord:
		return soap_out_ns__QueryVideoRecord(soap, tag, id, (const struct ns__QueryVideoRecord *)ptr, "ns:QueryVideoRecord");
	case SOAP_TYPE_ns__QueryVideoRecordResponse:
		return soap_out_ns__QueryVideoRecordResponse(soap, tag, id, (const struct ns__QueryVideoRecordResponse *)ptr, "ns:QueryVideoRecordResponse");
	case SOAP_TYPE_ns__AbandonCameraStream:
		return soap_out_ns__AbandonCameraStream(soap, tag, id, (const struct ns__AbandonCameraStream *)ptr, "ns:AbandonCameraStream");
	case SOAP_TYPE_ns__PTZCtrlCamera:
		return soap_out_ns__PTZCtrlCamera(soap, tag, id, (const struct ns__PTZCtrlCamera *)ptr, "ns:PTZCtrlCamera");
	case SOAP_TYPE_ns__SwitchCameraToStream:
		return soap_out_ns__SwitchCameraToStream(soap, tag, id, (const struct ns__SwitchCameraToStream *)ptr, "ns:SwitchCameraToStream");
	case SOAP_TYPE_ns_HeartBeat:
		return soap_out_ns_HeartBeat(soap, tag, id, (const struct ns_HeartBeat *)ptr, "ns-HeartBeat");
	case SOAP_TYPE_ns__HBUSERINFO:
		return soap_out_ns__HBUSERINFO(soap, tag, id, (const struct ns__HBUSERINFO *)ptr, "ns:HBUSERINFO");
	case SOAP_TYPE_ns__HBNET_CAMREA_INFO:
		return soap_out_ns__HBNET_CAMREA_INFO(soap, tag, id, (const struct ns__HBNET_CAMREA_INFO *)ptr, "ns:HBNET-CAMREA-INFO");
	case SOAP_TYPE_ns__HBNET_RECOED_FILECOND:
		return soap_out_ns__HBNET_RECOED_FILECOND(soap, tag, id, (const struct ns__HBNET_RECOED_FILECOND *)ptr, "ns:HBNET-RECOED-FILECOND");
	case SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL:
		return soap_out_ns__HBNET_RECOED_PLAYCTRL(soap, tag, id, (const struct ns__HBNET_RECOED_PLAYCTRL *)ptr, "ns:HBNET-RECOED-PLAYCTRL");
	case SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL:
		return soap_out_ns__HBNET_CAMERA_PTZCTRL(soap, tag, id, (const struct ns__HBNET_CAMERA_PTZCTRL *)ptr, "ns:HBNET-CAMERA-PTZCTRL");
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP:
		return soap_out_ns__HBNET_VIDEO_STREAM_RESP(soap, tag, id, (const struct ns__HBNET_VIDEO_STREAM_RESP *)ptr, "ns:HBNET-VIDEO-STREAM-RESP");
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM:
		return soap_out_ns__HBNET_VIDEO_STREAM(soap, tag, id, (const struct ns__HBNET_VIDEO_STREAM *)ptr, "ns:HBNET-VIDEO-STREAM");
	case SOAP_TYPE_ns__Response:
		return soap_out_ns__Response(soap, tag, id, (const struct ns__Response *)ptr, "ns:Response");
	case SOAP_TYPE_PointerTonsCXF__getDataCxfResponse:
		return soap_out_PointerTonsCXF__getDataCxfResponse(soap, tag, id, (nsCXF__getDataCxfResponse *const*)ptr, "nsCXF:getDataCxfResponse");
	case SOAP_TYPE_PointerTonsCXF__getDataCxf:
		return soap_out_PointerTonsCXF__getDataCxf(soap, tag, id, (nsCXF__getDataCxf *const*)ptr, "nsCXF:getDataCxf");
	case SOAP_TYPE_PointerTo_ns1__getDataResponse:
		return soap_out_PointerTo_ns1__getDataResponse(soap, tag, id, (_ns1__getDataResponse *const*)ptr, "ns1:getDataResponse");
	case SOAP_TYPE_PointerTo_ns1__getData:
		return soap_out_PointerTo_ns1__getData(soap, tag, id, (_ns1__getData *const*)ptr, "ns1:getData");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTons__HBNET_VIDEO_STREAM_RESP:
		return soap_out_PointerTons__HBNET_VIDEO_STREAM_RESP(soap, tag, id, (struct ns__HBNET_VIDEO_STREAM_RESP *const*)ptr, "ns:HBNET-VIDEO-STREAM-RESP");
	case SOAP_TYPE_PointerTons__HBNET_RECOED_FILECOND:
		return soap_out_PointerTons__HBNET_RECOED_FILECOND(soap, tag, id, (struct ns__HBNET_RECOED_FILECOND *const*)ptr, "ns:HBNET-RECOED-FILECOND");
	case SOAP_TYPE_PointerTons__Response:
		return soap_out_PointerTons__Response(soap, tag, id, (struct ns__Response *const*)ptr, "ns:Response");
	case SOAP_TYPE_PointerTons__HBNET_CAMERA_PTZCTRL:
		return soap_out_PointerTons__HBNET_CAMERA_PTZCTRL(soap, tag, id, (struct ns__HBNET_CAMERA_PTZCTRL *const*)ptr, "ns:HBNET-CAMERA-PTZCTRL");
	case SOAP_TYPE_PointerTons__HBNET_VIDEO_STREAM:
		return soap_out_PointerTons__HBNET_VIDEO_STREAM(soap, tag, id, (struct ns__HBNET_VIDEO_STREAM *const*)ptr, "ns:HBNET-VIDEO-STREAM");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_nsCXF__getDataCxfResponse:
		((nsCXF__getDataCxfResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_nsCXF__getDataCxf:
		((nsCXF__getDataCxf *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getDataResponse:
		((_ns1__getDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getData:
		((_ns1__getData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE___nsCXF__getDataCxf:
		soap_serialize___nsCXF__getDataCxf(soap, (const struct __nsCXF__getDataCxf *)ptr);
		break;
	case SOAP_TYPE___ns1__getData:
		soap_serialize___ns1__getData(soap, (const struct __ns1__getData *)ptr);
		break;
	case SOAP_TYPE_ns__HBOperate:
		soap_serialize_ns__HBOperate(soap, (const struct ns__HBOperate *)ptr);
		break;
	case SOAP_TYPE_ns__HBOperateResponse:
		soap_serialize_ns__HBOperateResponse(soap, (const struct ns__HBOperateResponse *)ptr);
		break;
	case SOAP_TYPE_ns__NetMaster:
		soap_serialize_ns__NetMaster(soap, (const struct ns__NetMaster *)ptr);
		break;
	case SOAP_TYPE_ns__NetMasterResponse:
		soap_serialize_ns__NetMasterResponse(soap, (const struct ns__NetMasterResponse *)ptr);
		break;
	case SOAP_TYPE_ns__AutoSysUpdate:
		soap_serialize_ns__AutoSysUpdate(soap, (const struct ns__AutoSysUpdate *)ptr);
		break;
	case SOAP_TYPE_ns__HeartBeat:
		soap_serialize_ns__HeartBeat(soap, (const struct ns__HeartBeat *)ptr);
		break;
	case SOAP_TYPE_ns__AbandonVideoRecord:
		soap_serialize_ns__AbandonVideoRecord(soap, (const struct ns__AbandonVideoRecord *)ptr);
		break;
	case SOAP_TYPE_ns__DownloadVideoRecord:
		soap_serialize_ns__DownloadVideoRecord(soap, (const struct ns__DownloadVideoRecord *)ptr);
		break;
	case SOAP_TYPE_ns__DownloadVideoRecordResponse:
		soap_serialize_ns__DownloadVideoRecordResponse(soap, (const struct ns__DownloadVideoRecordResponse *)ptr);
		break;
	case SOAP_TYPE_ns__PlayVideoRecord:
		soap_serialize_ns__PlayVideoRecord(soap, (const struct ns__PlayVideoRecord *)ptr);
		break;
	case SOAP_TYPE_ns__QueryVideoRecord:
		soap_serialize_ns__QueryVideoRecord(soap, (const struct ns__QueryVideoRecord *)ptr);
		break;
	case SOAP_TYPE_ns__QueryVideoRecordResponse:
		soap_serialize_ns__QueryVideoRecordResponse(soap, (const struct ns__QueryVideoRecordResponse *)ptr);
		break;
	case SOAP_TYPE_ns__AbandonCameraStream:
		soap_serialize_ns__AbandonCameraStream(soap, (const struct ns__AbandonCameraStream *)ptr);
		break;
	case SOAP_TYPE_ns__PTZCtrlCamera:
		soap_serialize_ns__PTZCtrlCamera(soap, (const struct ns__PTZCtrlCamera *)ptr);
		break;
	case SOAP_TYPE_ns__SwitchCameraToStream:
		soap_serialize_ns__SwitchCameraToStream(soap, (const struct ns__SwitchCameraToStream *)ptr);
		break;
	case SOAP_TYPE_ns_HeartBeat:
		soap_serialize_ns_HeartBeat(soap, (const struct ns_HeartBeat *)ptr);
		break;
	case SOAP_TYPE_ns__HBUSERINFO:
		soap_serialize_ns__HBUSERINFO(soap, (const struct ns__HBUSERINFO *)ptr);
		break;
	case SOAP_TYPE_ns__HBNET_CAMREA_INFO:
		soap_serialize_ns__HBNET_CAMREA_INFO(soap, (const struct ns__HBNET_CAMREA_INFO *)ptr);
		break;
	case SOAP_TYPE_ns__HBNET_RECOED_FILECOND:
		soap_serialize_ns__HBNET_RECOED_FILECOND(soap, (const struct ns__HBNET_RECOED_FILECOND *)ptr);
		break;
	case SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL:
		soap_serialize_ns__HBNET_RECOED_PLAYCTRL(soap, (const struct ns__HBNET_RECOED_PLAYCTRL *)ptr);
		break;
	case SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL:
		soap_serialize_ns__HBNET_CAMERA_PTZCTRL(soap, (const struct ns__HBNET_CAMERA_PTZCTRL *)ptr);
		break;
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP:
		soap_serialize_ns__HBNET_VIDEO_STREAM_RESP(soap, (const struct ns__HBNET_VIDEO_STREAM_RESP *)ptr);
		break;
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM:
		soap_serialize_ns__HBNET_VIDEO_STREAM(soap, (const struct ns__HBNET_VIDEO_STREAM *)ptr);
		break;
	case SOAP_TYPE_ns__Response:
		soap_serialize_ns__Response(soap, (const struct ns__Response *)ptr);
		break;
	case SOAP_TYPE_PointerTonsCXF__getDataCxfResponse:
		soap_serialize_PointerTonsCXF__getDataCxfResponse(soap, (nsCXF__getDataCxfResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTonsCXF__getDataCxf:
		soap_serialize_PointerTonsCXF__getDataCxf(soap, (nsCXF__getDataCxf *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getDataResponse:
		soap_serialize_PointerTo_ns1__getDataResponse(soap, (_ns1__getDataResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getData:
		soap_serialize_PointerTo_ns1__getData(soap, (_ns1__getData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__HBNET_VIDEO_STREAM_RESP:
		soap_serialize_PointerTons__HBNET_VIDEO_STREAM_RESP(soap, (struct ns__HBNET_VIDEO_STREAM_RESP *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__HBNET_RECOED_FILECOND:
		soap_serialize_PointerTons__HBNET_RECOED_FILECOND(soap, (struct ns__HBNET_RECOED_FILECOND *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__Response:
		soap_serialize_PointerTons__Response(soap, (struct ns__Response *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__HBNET_CAMERA_PTZCTRL:
		soap_serialize_PointerTons__HBNET_CAMERA_PTZCTRL(soap, (struct ns__HBNET_CAMERA_PTZCTRL *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__HBNET_VIDEO_STREAM:
		soap_serialize_PointerTons__HBNET_VIDEO_STREAM(soap, (struct ns__HBNET_VIDEO_STREAM *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Response:
		return (void*)soap_instantiate_ns__Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM:
		return (void*)soap_instantiate_ns__HBNET_VIDEO_STREAM(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP:
		return (void*)soap_instantiate_ns__HBNET_VIDEO_STREAM_RESP(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL:
		return (void*)soap_instantiate_ns__HBNET_CAMERA_PTZCTRL(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL:
		return (void*)soap_instantiate_ns__HBNET_RECOED_PLAYCTRL(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBNET_RECOED_FILECOND:
		return (void*)soap_instantiate_ns__HBNET_RECOED_FILECOND(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBNET_CAMREA_INFO:
		return (void*)soap_instantiate_ns__HBNET_CAMREA_INFO(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBUSERINFO:
		return (void*)soap_instantiate_ns__HBUSERINFO(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns_HeartBeat:
		return (void*)soap_instantiate_ns_HeartBeat(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__SwitchCameraToStream:
		return (void*)soap_instantiate_ns__SwitchCameraToStream(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__PTZCtrlCamera:
		return (void*)soap_instantiate_ns__PTZCtrlCamera(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__AbandonCameraStream:
		return (void*)soap_instantiate_ns__AbandonCameraStream(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__QueryVideoRecordResponse:
		return (void*)soap_instantiate_ns__QueryVideoRecordResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__QueryVideoRecord:
		return (void*)soap_instantiate_ns__QueryVideoRecord(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__PlayVideoRecord:
		return (void*)soap_instantiate_ns__PlayVideoRecord(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__DownloadVideoRecordResponse:
		return (void*)soap_instantiate_ns__DownloadVideoRecordResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__DownloadVideoRecord:
		return (void*)soap_instantiate_ns__DownloadVideoRecord(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__AbandonVideoRecord:
		return (void*)soap_instantiate_ns__AbandonVideoRecord(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HeartBeat:
		return (void*)soap_instantiate_ns__HeartBeat(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__AutoSysUpdate:
		return (void*)soap_instantiate_ns__AutoSysUpdate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__NetMasterResponse:
		return (void*)soap_instantiate_ns__NetMasterResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__NetMaster:
		return (void*)soap_instantiate_ns__NetMaster(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBOperateResponse:
		return (void*)soap_instantiate_ns__HBOperateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__HBOperate:
		return (void*)soap_instantiate_ns__HBOperate(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getData:
		return (void*)soap_instantiate__ns1__getData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getDataResponse:
		return (void*)soap_instantiate__ns1__getDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getData:
		return (void*)soap_instantiate___ns1__getData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_nsCXF__getDataCxf:
		return (void*)soap_instantiate_nsCXF__getDataCxf(soap, -1, type, arrayType, n);
	case SOAP_TYPE_nsCXF__getDataCxfResponse:
		return (void*)soap_instantiate_nsCXF__getDataCxfResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___nsCXF__getDataCxf:
		return (void*)soap_instantiate___nsCXF__getDataCxf(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_ns__Response:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__Response*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__Response*>(p->ptr));
		break;
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__HBNET_VIDEO_STREAM*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__HBNET_VIDEO_STREAM*>(p->ptr));
		break;
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__HBNET_VIDEO_STREAM_RESP*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__HBNET_VIDEO_STREAM_RESP*>(p->ptr));
		break;
	case SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__HBNET_CAMERA_PTZCTRL*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__HBNET_CAMERA_PTZCTRL*>(p->ptr));
		break;
	case SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__HBNET_RECOED_PLAYCTRL*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__HBNET_RECOED_PLAYCTRL*>(p->ptr));
		break;
	case SOAP_TYPE_ns__HBNET_RECOED_FILECOND:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__HBNET_RECOED_FILECOND*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__HBNET_RECOED_FILECOND*>(p->ptr));
		break;
	case SOAP_TYPE_ns__HBNET_CAMREA_INFO:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__HBNET_CAMREA_INFO*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__HBNET_CAMREA_INFO*>(p->ptr));
		break;
	case SOAP_TYPE_ns__HBUSERINFO:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__HBUSERINFO*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__HBUSERINFO*>(p->ptr));
		break;
	case SOAP_TYPE_ns_HeartBeat:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns_HeartBeat*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns_HeartBeat*>(p->ptr));
		break;
	case SOAP_TYPE_ns__SwitchCameraToStream:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__SwitchCameraToStream*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__SwitchCameraToStream*>(p->ptr));
		break;
	case SOAP_TYPE_ns__PTZCtrlCamera:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__PTZCtrlCamera*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__PTZCtrlCamera*>(p->ptr));
		break;
	case SOAP_TYPE_ns__AbandonCameraStream:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__AbandonCameraStream*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__AbandonCameraStream*>(p->ptr));
		break;
	case SOAP_TYPE_ns__QueryVideoRecordResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__QueryVideoRecordResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__QueryVideoRecordResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__QueryVideoRecord:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__QueryVideoRecord*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__QueryVideoRecord*>(p->ptr));
		break;
	case SOAP_TYPE_ns__PlayVideoRecord:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__PlayVideoRecord*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__PlayVideoRecord*>(p->ptr));
		break;
	case SOAP_TYPE_ns__DownloadVideoRecordResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__DownloadVideoRecordResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__DownloadVideoRecordResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__DownloadVideoRecord:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__DownloadVideoRecord*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__DownloadVideoRecord*>(p->ptr));
		break;
	case SOAP_TYPE_ns__AbandonVideoRecord:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__AbandonVideoRecord*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__AbandonVideoRecord*>(p->ptr));
		break;
	case SOAP_TYPE_ns__HeartBeat:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__HeartBeat*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__HeartBeat*>(p->ptr));
		break;
	case SOAP_TYPE_ns__AutoSysUpdate:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__AutoSysUpdate*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__AutoSysUpdate*>(p->ptr));
		break;
	case SOAP_TYPE_ns__NetMasterResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__NetMasterResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__NetMasterResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__NetMaster:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__NetMaster*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__NetMaster*>(p->ptr));
		break;
	case SOAP_TYPE_ns__HBOperateResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__HBOperateResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__HBOperateResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__HBOperate:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__HBOperate*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__HBOperate*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__getData:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__getData*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__getData*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__getDataResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__getDataResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__getDataResponse*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__getData:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__getData*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__getData*>(p->ptr));
		break;
	case SOAP_TYPE_nsCXF__getDataCxf:
		if (p->size < 0)
			SOAP_DELETE(static_cast<nsCXF__getDataCxf*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<nsCXF__getDataCxf*>(p->ptr));
		break;
	case SOAP_TYPE_nsCXF__getDataCxfResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<nsCXF__getDataCxfResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<nsCXF__getDataCxfResponse*>(p->ptr));
		break;
	case SOAP_TYPE___nsCXF__getDataCxf:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __nsCXF__getDataCxf*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __nsCXF__getDataCxf*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	do
	{	switch (t)
		{
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns__Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__Response type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__Response*)p = *(struct ns__Response*)q;
		break;
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__HBNET_VIDEO_STREAM type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__HBNET_VIDEO_STREAM*)p = *(struct ns__HBNET_VIDEO_STREAM*)q;
		break;
	case SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__HBNET_VIDEO_STREAM_RESP type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__HBNET_VIDEO_STREAM_RESP*)p = *(struct ns__HBNET_VIDEO_STREAM_RESP*)q;
		break;
	case SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__HBNET_CAMERA_PTZCTRL type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__HBNET_CAMERA_PTZCTRL*)p = *(struct ns__HBNET_CAMERA_PTZCTRL*)q;
		break;
	case SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__HBNET_RECOED_PLAYCTRL type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__HBNET_RECOED_PLAYCTRL*)p = *(struct ns__HBNET_RECOED_PLAYCTRL*)q;
		break;
	case SOAP_TYPE_ns__HBNET_RECOED_FILECOND:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__HBNET_RECOED_FILECOND type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__HBNET_RECOED_FILECOND*)p = *(struct ns__HBNET_RECOED_FILECOND*)q;
		break;
	case SOAP_TYPE_ns__HBNET_CAMREA_INFO:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__HBNET_CAMREA_INFO type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__HBNET_CAMREA_INFO*)p = *(struct ns__HBNET_CAMREA_INFO*)q;
		break;
	case SOAP_TYPE_ns__HBUSERINFO:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__HBUSERINFO type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__HBUSERINFO*)p = *(struct ns__HBUSERINFO*)q;
		break;
	case SOAP_TYPE_ns_HeartBeat:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns_HeartBeat type=%d location=%p object=%p\n", t, p, q));
		*(struct ns_HeartBeat*)p = *(struct ns_HeartBeat*)q;
		break;
	case SOAP_TYPE_ns__SwitchCameraToStream:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__SwitchCameraToStream type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__SwitchCameraToStream*)p = *(struct ns__SwitchCameraToStream*)q;
		break;
	case SOAP_TYPE_ns__PTZCtrlCamera:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__PTZCtrlCamera type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__PTZCtrlCamera*)p = *(struct ns__PTZCtrlCamera*)q;
		break;
	case SOAP_TYPE_ns__AbandonCameraStream:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__AbandonCameraStream type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__AbandonCameraStream*)p = *(struct ns__AbandonCameraStream*)q;
		break;
	case SOAP_TYPE_ns__QueryVideoRecordResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__QueryVideoRecordResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__QueryVideoRecordResponse*)p = *(struct ns__QueryVideoRecordResponse*)q;
		break;
	case SOAP_TYPE_ns__QueryVideoRecord:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__QueryVideoRecord type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__QueryVideoRecord*)p = *(struct ns__QueryVideoRecord*)q;
		break;
	case SOAP_TYPE_ns__PlayVideoRecord:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__PlayVideoRecord type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__PlayVideoRecord*)p = *(struct ns__PlayVideoRecord*)q;
		break;
	case SOAP_TYPE_ns__DownloadVideoRecordResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__DownloadVideoRecordResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__DownloadVideoRecordResponse*)p = *(struct ns__DownloadVideoRecordResponse*)q;
		break;
	case SOAP_TYPE_ns__DownloadVideoRecord:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__DownloadVideoRecord type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__DownloadVideoRecord*)p = *(struct ns__DownloadVideoRecord*)q;
		break;
	case SOAP_TYPE_ns__AbandonVideoRecord:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__AbandonVideoRecord type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__AbandonVideoRecord*)p = *(struct ns__AbandonVideoRecord*)q;
		break;
	case SOAP_TYPE_ns__HeartBeat:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__HeartBeat type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__HeartBeat*)p = *(struct ns__HeartBeat*)q;
		break;
	case SOAP_TYPE_ns__AutoSysUpdate:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__AutoSysUpdate type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__AutoSysUpdate*)p = *(struct ns__AutoSysUpdate*)q;
		break;
	case SOAP_TYPE_ns__NetMasterResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__NetMasterResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__NetMasterResponse*)p = *(struct ns__NetMasterResponse*)q;
		break;
	case SOAP_TYPE_ns__NetMaster:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__NetMaster type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__NetMaster*)p = *(struct ns__NetMaster*)q;
		break;
	case SOAP_TYPE_ns__HBOperateResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__HBOperateResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__HBOperateResponse*)p = *(struct ns__HBOperateResponse*)q;
		break;
	case SOAP_TYPE_ns__HBOperate:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__HBOperate type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__HBOperate*)p = *(struct ns__HBOperate*)q;
		break;
	case SOAP_TYPE__ns1__getData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getData type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getData*)p = *(_ns1__getData*)q;
		break;
	case SOAP_TYPE__ns1__getDataResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getDataResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getDataResponse*)p = *(_ns1__getDataResponse*)q;
		break;
	case SOAP_TYPE___ns1__getData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getData type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getData*)p = *(struct __ns1__getData*)q;
		break;
	case SOAP_TYPE_nsCXF__getDataCxf:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy nsCXF__getDataCxf type=%d location=%p object=%p\n", t, p, q));
		*(nsCXF__getDataCxf*)p = *(nsCXF__getDataCxf*)q;
		break;
	case SOAP_TYPE_nsCXF__getDataCxfResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy nsCXF__getDataCxfResponse type=%d location=%p object=%p\n", t, p, q));
		*(nsCXF__getDataCxfResponse*)p = *(nsCXF__getDataCxfResponse*)q;
		break;
	case SOAP_TYPE___nsCXF__getDataCxf:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __nsCXF__getDataCxf type=%d location=%p object=%p\n", t, p, q));
		*(struct __nsCXF__getDataCxf*)p = *(struct __nsCXF__getDataCxf*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag?tag:"byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag?tag:"int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap *soap, long *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_long
	*a = SOAP_DEFAULT_long;
#else
	*a = (long)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap *soap, const char *tag, long *a, const char *type)
{
	a = soap_inlong(soap, tag, a, type, SOAP_TYPE_long);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap *soap, const long *a, const char *tag, const char *type)
{
	if (soap_out_long(soap, tag?tag:"long", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	a = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLong(struct soap *soap, unsigned long *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedLong
	*a = SOAP_DEFAULT_unsignedLong;
#else
	*a = (unsigned long)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLong(struct soap *soap, const char *tag, int id, const unsigned long *a, const char *type)
{
	return soap_outunsignedLong(soap, tag, id, a, type, SOAP_TYPE_unsignedLong);
}

SOAP_FMAC3 unsigned long * SOAP_FMAC4 soap_in_unsignedLong(struct soap *soap, const char *tag, unsigned long *a, const char *type)
{
	a = soap_inunsignedLong(soap, tag, a, type, SOAP_TYPE_unsignedLong);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLong(struct soap *soap, const unsigned long *a, const char *tag, const char *type)
{
	if (soap_out_unsignedLong(soap, tag?tag:"unsignedLong", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned long * SOAP_FMAC4 soap_get_unsignedLong(struct soap *soap, unsigned long *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedLong(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void nsCXF__getDataCxfResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->nsCXF__getDataCxfResponse::return_ = NULL;
	/* transient soap skipped */
}

void nsCXF__getDataCxfResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->nsCXF__getDataCxfResponse::return_);
#endif
}

int nsCXF__getDataCxfResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_nsCXF__getDataCxfResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_nsCXF__getDataCxfResponse(struct soap *soap, const char *tag, int id, const nsCXF__getDataCxfResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_nsCXF__getDataCxfResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "return", -1, &a->nsCXF__getDataCxfResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *nsCXF__getDataCxfResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_nsCXF__getDataCxfResponse(soap, tag, this, type);
}

SOAP_FMAC3 nsCXF__getDataCxfResponse * SOAP_FMAC4 soap_in_nsCXF__getDataCxfResponse(struct soap *soap, const char *tag, nsCXF__getDataCxfResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (nsCXF__getDataCxfResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_nsCXF__getDataCxfResponse, sizeof(nsCXF__getDataCxfResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "return", &a->nsCXF__getDataCxfResponse::return_, "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (nsCXF__getDataCxfResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_nsCXF__getDataCxfResponse, SOAP_TYPE_nsCXF__getDataCxfResponse, sizeof(nsCXF__getDataCxfResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 nsCXF__getDataCxfResponse * SOAP_FMAC2 soap_instantiate_nsCXF__getDataCxfResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_nsCXF__getDataCxfResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	nsCXF__getDataCxfResponse *p;
	size_t k = sizeof(nsCXF__getDataCxfResponse);
	if (n < 0)
	{	p = SOAP_NEW(nsCXF__getDataCxfResponse);
		if (p)
			((nsCXF__getDataCxfResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(nsCXF__getDataCxfResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((nsCXF__getDataCxfResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated nsCXF__getDataCxfResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_nsCXF__getDataCxfResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int nsCXF__getDataCxfResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"nsCXF:getDataCxfResponse", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *nsCXF__getDataCxfResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_nsCXF__getDataCxfResponse(soap, this, tag, type);
}

SOAP_FMAC3 nsCXF__getDataCxfResponse * SOAP_FMAC4 soap_get_nsCXF__getDataCxfResponse(struct soap *soap, nsCXF__getDataCxfResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_nsCXF__getDataCxfResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void nsCXF__getDataCxf::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->nsCXF__getDataCxf::arg0 = NULL;
	this->nsCXF__getDataCxf::arg1 = NULL;
	this->nsCXF__getDataCxf::arg2 = NULL;
	/* transient soap skipped */
}

void nsCXF__getDataCxf::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->nsCXF__getDataCxf::arg0);
	soap_serialize_PointerTostd__string(soap, &this->nsCXF__getDataCxf::arg1);
	soap_serialize_PointerTostd__string(soap, &this->nsCXF__getDataCxf::arg2);
#endif
}

int nsCXF__getDataCxf::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_nsCXF__getDataCxf(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_nsCXF__getDataCxf(struct soap *soap, const char *tag, int id, const nsCXF__getDataCxf *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_nsCXF__getDataCxf), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &a->nsCXF__getDataCxf::arg0, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg1", -1, &a->nsCXF__getDataCxf::arg1, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg2", -1, &a->nsCXF__getDataCxf::arg2, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *nsCXF__getDataCxf::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_nsCXF__getDataCxf(soap, tag, this, type);
}

SOAP_FMAC3 nsCXF__getDataCxf * SOAP_FMAC4 soap_in_nsCXF__getDataCxf(struct soap *soap, const char *tag, nsCXF__getDataCxf *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (nsCXF__getDataCxf *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_nsCXF__getDataCxf, sizeof(nsCXF__getDataCxf), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	size_t soap_flag_arg21 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "arg0", &a->nsCXF__getDataCxf::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			if (soap_flag_arg11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "arg1", &a->nsCXF__getDataCxf::arg1, "xsd:string"))
				{	soap_flag_arg11--;
					continue;
				}
			if (soap_flag_arg21 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "arg2", &a->nsCXF__getDataCxf::arg2, "xsd:string"))
				{	soap_flag_arg21--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (nsCXF__getDataCxf *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_nsCXF__getDataCxf, SOAP_TYPE_nsCXF__getDataCxf, sizeof(nsCXF__getDataCxf), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 nsCXF__getDataCxf * SOAP_FMAC2 soap_instantiate_nsCXF__getDataCxf(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_nsCXF__getDataCxf(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	nsCXF__getDataCxf *p;
	size_t k = sizeof(nsCXF__getDataCxf);
	if (n < 0)
	{	p = SOAP_NEW(nsCXF__getDataCxf);
		if (p)
			((nsCXF__getDataCxf*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(nsCXF__getDataCxf, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((nsCXF__getDataCxf*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated nsCXF__getDataCxf location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_nsCXF__getDataCxf, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int nsCXF__getDataCxf::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"nsCXF:getDataCxf", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *nsCXF__getDataCxf::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_nsCXF__getDataCxf(soap, this, tag, type);
}

SOAP_FMAC3 nsCXF__getDataCxf * SOAP_FMAC4 soap_get_nsCXF__getDataCxf(struct soap *soap, nsCXF__getDataCxf *p, const char *tag, const char *type)
{
	if ((p = soap_in_nsCXF__getDataCxf(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getDataResponse::out = NULL;
	/* transient soap skipped */
}

void _ns1__getDataResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__getDataResponse::out);
#endif
}

int _ns1__getDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getDataResponse(struct soap *soap, const char *tag, int id, const _ns1__getDataResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getDataResponse), type))
		return soap->error;
	if (a->out)
		soap_element_result(soap, "ns1:out");
	if (!a->_ns1__getDataResponse::out)
	{	if (soap_element_nil(soap, "ns1:out"))
			return soap->error;
	}
	else
	if (soap_out_PointerTostd__string(soap, "ns1:out", -1, &a->_ns1__getDataResponse::out, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getDataResponse * SOAP_FMAC4 soap_in__ns1__getDataResponse(struct soap *soap, const char *tag, _ns1__getDataResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getDataResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getDataResponse, sizeof(_ns1__getDataResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_out1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:out", &a->_ns1__getDataResponse::out, "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			soap_check_result(soap, "ns1:out");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__getDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getDataResponse, SOAP_TYPE__ns1__getDataResponse, sizeof(_ns1__getDataResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getDataResponse * SOAP_FMAC2 soap_instantiate__ns1__getDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getDataResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getDataResponse *p;
	size_t k = sizeof(_ns1__getDataResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__getDataResponse);
		if (p)
			((_ns1__getDataResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__getDataResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__getDataResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getDataResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__getDataResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__getDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"ns1:getDataResponse", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getDataResponse * SOAP_FMAC4 soap_get__ns1__getDataResponse(struct soap *soap, _ns1__getDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getData::in0 = NULL;
	this->_ns1__getData::in1 = NULL;
	this->_ns1__getData::in2 = NULL;
	/* transient soap skipped */
}

void _ns1__getData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__getData::in0);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__getData::in1);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__getData::in2);
#endif
}

int _ns1__getData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getData(struct soap *soap, const char *tag, int id, const _ns1__getData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getData), type))
		return soap->error;
	if (!a->_ns1__getData::in0)
	{	if (soap_element_nil(soap, "ns1:in0"))
			return soap->error;
	}
	else
	if (soap_out_PointerTostd__string(soap, "ns1:in0", -1, &a->_ns1__getData::in0, ""))
		return soap->error;
	if (!a->_ns1__getData::in1)
	{	if (soap_element_nil(soap, "ns1:in1"))
			return soap->error;
	}
	else
	if (soap_out_PointerTostd__string(soap, "ns1:in1", -1, &a->_ns1__getData::in1, ""))
		return soap->error;
	if (!a->_ns1__getData::in2)
	{	if (soap_element_nil(soap, "ns1:in2"))
			return soap->error;
	}
	else
	if (soap_out_PointerTostd__string(soap, "ns1:in2", -1, &a->_ns1__getData::in2, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getData(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getData * SOAP_FMAC4 soap_in__ns1__getData(struct soap *soap, const char *tag, _ns1__getData *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getData *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getData, sizeof(_ns1__getData), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_in01 = 1;
	size_t soap_flag_in11 = 1;
	size_t soap_flag_in21 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:in0", &a->_ns1__getData::in0, "xsd:string"))
				{	soap_flag_in01--;
					continue;
				}
			if (soap_flag_in11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:in1", &a->_ns1__getData::in1, "xsd:string"))
				{	soap_flag_in11--;
					continue;
				}
			if (soap_flag_in21 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:in2", &a->_ns1__getData::in2, "xsd:string"))
				{	soap_flag_in21--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in01 > 0 || soap_flag_in11 > 0 || soap_flag_in21 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__getData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getData, SOAP_TYPE__ns1__getData, sizeof(_ns1__getData), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getData * SOAP_FMAC2 soap_instantiate__ns1__getData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getData(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getData *p;
	size_t k = sizeof(_ns1__getData);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__getData);
		if (p)
			((_ns1__getData*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__getData, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__getData*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getData location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__getData, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__getData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"ns1:getData", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getData(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getData * SOAP_FMAC4 soap_get__ns1__getData(struct soap *soap, _ns1__getData *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	if (n < 0)
	{	p = SOAP_NEW(std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_std__string, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag?tag:"string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___nsCXF__getDataCxf(struct soap *soap, struct __nsCXF__getDataCxf *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->nsCXF__getDataCxf_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___nsCXF__getDataCxf(struct soap *soap, const struct __nsCXF__getDataCxf *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTonsCXF__getDataCxf(soap, &a->nsCXF__getDataCxf_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___nsCXF__getDataCxf(struct soap *soap, const char *tag, int id, const struct __nsCXF__getDataCxf *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTonsCXF__getDataCxf(soap, "nsCXF:getDataCxf", -1, &a->nsCXF__getDataCxf_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __nsCXF__getDataCxf * SOAP_FMAC4 soap_in___nsCXF__getDataCxf(struct soap *soap, const char *tag, struct __nsCXF__getDataCxf *a, const char *type)
{
	size_t soap_flag_nsCXF__getDataCxf_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __nsCXF__getDataCxf *)soap_id_enter(soap, "", a, SOAP_TYPE___nsCXF__getDataCxf, sizeof(struct __nsCXF__getDataCxf), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___nsCXF__getDataCxf(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsCXF__getDataCxf_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTonsCXF__getDataCxf(soap, "nsCXF:getDataCxf", &a->nsCXF__getDataCxf_, "nsCXF:getDataCxf"))
				{	soap_flag_nsCXF__getDataCxf_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __nsCXF__getDataCxf * SOAP_FMAC2 soap_instantiate___nsCXF__getDataCxf(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___nsCXF__getDataCxf(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __nsCXF__getDataCxf *p;
	size_t k = sizeof(struct __nsCXF__getDataCxf);
	if (n < 0)
	{	p = SOAP_NEW(struct __nsCXF__getDataCxf);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __nsCXF__getDataCxf, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __nsCXF__getDataCxf location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___nsCXF__getDataCxf, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___nsCXF__getDataCxf(struct soap *soap, const struct __nsCXF__getDataCxf *a, const char *tag, const char *type)
{
	if (soap_out___nsCXF__getDataCxf(soap, tag?tag:"-nsCXF:getDataCxf", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __nsCXF__getDataCxf * SOAP_FMAC4 soap_get___nsCXF__getDataCxf(struct soap *soap, struct __nsCXF__getDataCxf *p, const char *tag, const char *type)
{
	if ((p = soap_in___nsCXF__getDataCxf(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getData(struct soap *soap, struct __ns1__getData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getData(struct soap *soap, const struct __ns1__getData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getData(soap, &a->ns1__getData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getData(struct soap *soap, const char *tag, int id, const struct __ns1__getData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getData(soap, "ns1:getData", -1, &a->ns1__getData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getData * SOAP_FMAC4 soap_in___ns1__getData(struct soap *soap, const char *tag, struct __ns1__getData *a, const char *type)
{
	size_t soap_flag_ns1__getData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getData *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getData, sizeof(struct __ns1__getData), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getData(soap, "ns1:getData", &a->ns1__getData, ""))
				{	soap_flag_ns1__getData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getData * SOAP_FMAC2 soap_instantiate___ns1__getData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getData(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getData *p;
	size_t k = sizeof(struct __ns1__getData);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__getData);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__getData, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getData location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__getData, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getData(struct soap *soap, const struct __ns1__getData *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getData(soap, tag?tag:"-ns1:getData", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getData * SOAP_FMAC4 soap_get___ns1__getData(struct soap *soap, struct __ns1__getData *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBOperate(struct soap *soap, struct ns__HBOperate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->szXml);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBOperate(struct soap *soap, const struct ns__HBOperate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->szXml);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBOperate(struct soap *soap, const char *tag, int id, const struct ns__HBOperate *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBOperate), type))
		return soap->error;
	if (soap_out_string(soap, "szXml", -1, (char*const*)&a->szXml, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBOperate * SOAP_FMAC4 soap_in_ns__HBOperate(struct soap *soap, const char *tag, struct ns__HBOperate *a, const char *type)
{
	size_t soap_flag_szXml = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBOperate *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBOperate, sizeof(struct ns__HBOperate), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__HBOperate(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_szXml && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "szXml", (char**)&a->szXml, "xsd:string"))
				{	soap_flag_szXml--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__HBOperate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBOperate, SOAP_TYPE_ns__HBOperate, sizeof(struct ns__HBOperate), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__HBOperate * SOAP_FMAC2 soap_instantiate_ns__HBOperate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBOperate(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__HBOperate *p;
	size_t k = sizeof(struct ns__HBOperate);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__HBOperate);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__HBOperate, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__HBOperate location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__HBOperate, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBOperate(struct soap *soap, const struct ns__HBOperate *a, const char *tag, const char *type)
{
	if (soap_out_ns__HBOperate(soap, tag?tag:"ns:HBOperate", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBOperate * SOAP_FMAC4 soap_get_ns__HBOperate(struct soap *soap, struct ns__HBOperate *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBOperate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBOperateResponse(struct soap *soap, struct ns__HBOperateResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->szXmlRes);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBOperateResponse(struct soap *soap, const struct ns__HBOperateResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->szXmlRes);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBOperateResponse(struct soap *soap, const char *tag, int id, const struct ns__HBOperateResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBOperateResponse), type))
		return soap->error;
	if (!a->szXmlRes)
	{	if (soap_element_nil(soap, "szXmlRes"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "szXmlRes", -1, (char*const*)&a->szXmlRes, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBOperateResponse * SOAP_FMAC4 soap_in_ns__HBOperateResponse(struct soap *soap, const char *tag, struct ns__HBOperateResponse *a, const char *type)
{
	size_t soap_flag_szXmlRes = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBOperateResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBOperateResponse, sizeof(struct ns__HBOperateResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__HBOperateResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_szXmlRes && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "szXmlRes", (char**)&a->szXmlRes, "xsd:string"))
				{	soap_flag_szXmlRes--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_szXmlRes > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__HBOperateResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBOperateResponse, SOAP_TYPE_ns__HBOperateResponse, sizeof(struct ns__HBOperateResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__HBOperateResponse * SOAP_FMAC2 soap_instantiate_ns__HBOperateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBOperateResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__HBOperateResponse *p;
	size_t k = sizeof(struct ns__HBOperateResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__HBOperateResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__HBOperateResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__HBOperateResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__HBOperateResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBOperateResponse(struct soap *soap, const struct ns__HBOperateResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns__HBOperateResponse(soap, tag?tag:"ns:HBOperateResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBOperateResponse * SOAP_FMAC4 soap_get_ns__HBOperateResponse(struct soap *soap, struct ns__HBOperateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBOperateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__NetMaster(struct soap *soap, struct ns__NetMaster *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->nIsOK);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__NetMaster(struct soap *soap, const struct ns__NetMaster *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__NetMaster(struct soap *soap, const char *tag, int id, const struct ns__NetMaster *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__NetMaster), type))
		return soap->error;
	if (soap_out_int(soap, "nIsOK", -1, &a->nIsOK, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__NetMaster * SOAP_FMAC4 soap_in_ns__NetMaster(struct soap *soap, const char *tag, struct ns__NetMaster *a, const char *type)
{
	size_t soap_flag_nIsOK = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__NetMaster *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__NetMaster, sizeof(struct ns__NetMaster), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__NetMaster(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nIsOK && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nIsOK", &a->nIsOK, "xsd:int"))
				{	soap_flag_nIsOK--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nIsOK > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__NetMaster *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__NetMaster, SOAP_TYPE_ns__NetMaster, sizeof(struct ns__NetMaster), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__NetMaster * SOAP_FMAC2 soap_instantiate_ns__NetMaster(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__NetMaster(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__NetMaster *p;
	size_t k = sizeof(struct ns__NetMaster);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__NetMaster);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__NetMaster, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__NetMaster location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__NetMaster, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__NetMaster(struct soap *soap, const struct ns__NetMaster *a, const char *tag, const char *type)
{
	if (soap_out_ns__NetMaster(soap, tag?tag:"ns:NetMaster", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__NetMaster * SOAP_FMAC4 soap_get_ns__NetMaster(struct soap *soap, struct ns__NetMaster *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__NetMaster(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__NetMasterResponse(struct soap *soap, struct ns__NetMasterResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->nResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__NetMasterResponse(struct soap *soap, const struct ns__NetMasterResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__NetMasterResponse(struct soap *soap, const char *tag, int id, const struct ns__NetMasterResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__NetMasterResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &a->nResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__NetMasterResponse * SOAP_FMAC4 soap_in_ns__NetMasterResponse(struct soap *soap, const char *tag, struct ns__NetMasterResponse *a, const char *type)
{
	size_t soap_flag_nResult = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__NetMasterResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__NetMasterResponse, sizeof(struct ns__NetMasterResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__NetMasterResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &a->nResult, "xsd:int"))
				{	soap_flag_nResult--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__NetMasterResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__NetMasterResponse, SOAP_TYPE_ns__NetMasterResponse, sizeof(struct ns__NetMasterResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__NetMasterResponse * SOAP_FMAC2 soap_instantiate_ns__NetMasterResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__NetMasterResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__NetMasterResponse *p;
	size_t k = sizeof(struct ns__NetMasterResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__NetMasterResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__NetMasterResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__NetMasterResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__NetMasterResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__NetMasterResponse(struct soap *soap, const struct ns__NetMasterResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns__NetMasterResponse(soap, tag?tag:"ns:NetMasterResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__NetMasterResponse * SOAP_FMAC4 soap_get_ns__NetMasterResponse(struct soap *soap, struct ns__NetMasterResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__NetMasterResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AutoSysUpdate(struct soap *soap, struct ns__AutoSysUpdate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->strXmlFile);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__AutoSysUpdate(struct soap *soap, const struct ns__AutoSysUpdate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->strXmlFile, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->strXmlFile);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AutoSysUpdate(struct soap *soap, const char *tag, int id, const struct ns__AutoSysUpdate *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__AutoSysUpdate), type))
		return soap->error;
	if (soap_out_std__string(soap, "strXmlFile", -1, &a->strXmlFile, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__AutoSysUpdate * SOAP_FMAC4 soap_in_ns__AutoSysUpdate(struct soap *soap, const char *tag, struct ns__AutoSysUpdate *a, const char *type)
{
	size_t soap_flag_strXmlFile = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__AutoSysUpdate *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__AutoSysUpdate, sizeof(struct ns__AutoSysUpdate), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns__AutoSysUpdate(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strXmlFile && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strXmlFile", &a->strXmlFile, "xsd:string"))
				{	soap_flag_strXmlFile--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_strXmlFile > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__AutoSysUpdate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__AutoSysUpdate, SOAP_TYPE_ns__AutoSysUpdate, sizeof(struct ns__AutoSysUpdate), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__AutoSysUpdate * SOAP_FMAC2 soap_instantiate_ns__AutoSysUpdate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__AutoSysUpdate(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__AutoSysUpdate *p;
	size_t k = sizeof(struct ns__AutoSysUpdate);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__AutoSysUpdate);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__AutoSysUpdate, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__AutoSysUpdate location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__AutoSysUpdate, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AutoSysUpdate(struct soap *soap, const struct ns__AutoSysUpdate *a, const char *tag, const char *type)
{
	if (soap_out_ns__AutoSysUpdate(soap, tag?tag:"ns:AutoSysUpdate", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__AutoSysUpdate * SOAP_FMAC4 soap_get_ns__AutoSysUpdate(struct soap *soap, struct ns__AutoSysUpdate *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__AutoSysUpdate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HeartBeat(struct soap *soap, struct ns__HeartBeat *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns_HeartBeat(soap, &a->nsHeartBeat);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HeartBeat(struct soap *soap, const struct ns__HeartBeat *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns_HeartBeat(soap, &a->nsHeartBeat);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HeartBeat(struct soap *soap, const char *tag, int id, const struct ns__HeartBeat *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HeartBeat), type))
		return soap->error;
	if (soap_out_ns_HeartBeat(soap, "nsHeartBeat", -1, &a->nsHeartBeat, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HeartBeat * SOAP_FMAC4 soap_in_ns__HeartBeat(struct soap *soap, const char *tag, struct ns__HeartBeat *a, const char *type)
{
	size_t soap_flag_nsHeartBeat = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HeartBeat *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HeartBeat, sizeof(struct ns__HeartBeat), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns__HeartBeat(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsHeartBeat && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns_HeartBeat(soap, "nsHeartBeat", &a->nsHeartBeat, "ns-HeartBeat"))
				{	soap_flag_nsHeartBeat--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsHeartBeat > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__HeartBeat *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HeartBeat, SOAP_TYPE_ns__HeartBeat, sizeof(struct ns__HeartBeat), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__HeartBeat * SOAP_FMAC2 soap_instantiate_ns__HeartBeat(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HeartBeat(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__HeartBeat *p;
	size_t k = sizeof(struct ns__HeartBeat);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__HeartBeat);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__HeartBeat, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__HeartBeat location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__HeartBeat, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HeartBeat(struct soap *soap, const struct ns__HeartBeat *a, const char *tag, const char *type)
{
	if (soap_out_ns__HeartBeat(soap, tag?tag:"ns:HeartBeat", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HeartBeat * SOAP_FMAC4 soap_get_ns__HeartBeat(struct soap *soap, struct ns__HeartBeat *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HeartBeat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AbandonVideoRecord(struct soap *soap, struct ns__AbandonVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
	soap_default_string(soap, &a->FileName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__AbandonVideoRecord(struct soap *soap, const struct ns__AbandonVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_serialize_string(soap, (char*const*)&a->FileName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AbandonVideoRecord(struct soap *soap, const char *tag, int id, const struct ns__AbandonVideoRecord *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__AbandonVideoRecord), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	if (soap_out_string(soap, "FileName", -1, (char*const*)&a->FileName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__AbandonVideoRecord * SOAP_FMAC4 soap_in_ns__AbandonVideoRecord(struct soap *soap, const char *tag, struct ns__AbandonVideoRecord *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	size_t soap_flag_FileName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__AbandonVideoRecord *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__AbandonVideoRecord, sizeof(struct ns__AbandonVideoRecord), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns__AbandonVideoRecord(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap_flag_FileName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "FileName", (char**)&a->FileName, "xsd:string"))
				{	soap_flag_FileName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__AbandonVideoRecord *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__AbandonVideoRecord, SOAP_TYPE_ns__AbandonVideoRecord, sizeof(struct ns__AbandonVideoRecord), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__AbandonVideoRecord * SOAP_FMAC2 soap_instantiate_ns__AbandonVideoRecord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__AbandonVideoRecord(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__AbandonVideoRecord *p;
	size_t k = sizeof(struct ns__AbandonVideoRecord);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__AbandonVideoRecord);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__AbandonVideoRecord, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__AbandonVideoRecord location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__AbandonVideoRecord, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AbandonVideoRecord(struct soap *soap, const struct ns__AbandonVideoRecord *a, const char *tag, const char *type)
{
	if (soap_out_ns__AbandonVideoRecord(soap, tag?tag:"ns:AbandonVideoRecord", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__AbandonVideoRecord * SOAP_FMAC4 soap_get_ns__AbandonVideoRecord(struct soap *soap, struct ns__AbandonVideoRecord *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__AbandonVideoRecord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DownloadVideoRecord(struct soap *soap, struct ns__DownloadVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
	soap_default_string(soap, &a->szFileName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DownloadVideoRecord(struct soap *soap, const struct ns__DownloadVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_serialize_string(soap, (char*const*)&a->szFileName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DownloadVideoRecord(struct soap *soap, const char *tag, int id, const struct ns__DownloadVideoRecord *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__DownloadVideoRecord), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	if (soap_out_string(soap, "szFileName", -1, (char*const*)&a->szFileName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__DownloadVideoRecord * SOAP_FMAC4 soap_in_ns__DownloadVideoRecord(struct soap *soap, const char *tag, struct ns__DownloadVideoRecord *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	size_t soap_flag_szFileName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__DownloadVideoRecord *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__DownloadVideoRecord, sizeof(struct ns__DownloadVideoRecord), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns__DownloadVideoRecord(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap_flag_szFileName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "szFileName", (char**)&a->szFileName, "xsd:string"))
				{	soap_flag_szFileName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__DownloadVideoRecord *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__DownloadVideoRecord, SOAP_TYPE_ns__DownloadVideoRecord, sizeof(struct ns__DownloadVideoRecord), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__DownloadVideoRecord * SOAP_FMAC2 soap_instantiate_ns__DownloadVideoRecord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__DownloadVideoRecord(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__DownloadVideoRecord *p;
	size_t k = sizeof(struct ns__DownloadVideoRecord);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__DownloadVideoRecord);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__DownloadVideoRecord, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__DownloadVideoRecord location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__DownloadVideoRecord, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DownloadVideoRecord(struct soap *soap, const struct ns__DownloadVideoRecord *a, const char *tag, const char *type)
{
	if (soap_out_ns__DownloadVideoRecord(soap, tag?tag:"ns:DownloadVideoRecord", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__DownloadVideoRecord * SOAP_FMAC4 soap_get_ns__DownloadVideoRecord(struct soap *soap, struct ns__DownloadVideoRecord *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__DownloadVideoRecord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DownloadVideoRecordResponse(struct soap *soap, struct ns__DownloadVideoRecordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->OutFileName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DownloadVideoRecordResponse(struct soap *soap, const struct ns__DownloadVideoRecordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->OutFileName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DownloadVideoRecordResponse(struct soap *soap, const char *tag, int id, const struct ns__DownloadVideoRecordResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__DownloadVideoRecordResponse), type))
		return soap->error;
	if (!a->OutFileName)
	{	if (soap_element_nil(soap, "OutFileName"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "OutFileName", -1, (char*const*)&a->OutFileName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__DownloadVideoRecordResponse * SOAP_FMAC4 soap_in_ns__DownloadVideoRecordResponse(struct soap *soap, const char *tag, struct ns__DownloadVideoRecordResponse *a, const char *type)
{
	size_t soap_flag_OutFileName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__DownloadVideoRecordResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__DownloadVideoRecordResponse, sizeof(struct ns__DownloadVideoRecordResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__DownloadVideoRecordResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutFileName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "OutFileName", (char**)&a->OutFileName, "xsd:string"))
				{	soap_flag_OutFileName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutFileName > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__DownloadVideoRecordResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__DownloadVideoRecordResponse, SOAP_TYPE_ns__DownloadVideoRecordResponse, sizeof(struct ns__DownloadVideoRecordResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__DownloadVideoRecordResponse * SOAP_FMAC2 soap_instantiate_ns__DownloadVideoRecordResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__DownloadVideoRecordResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__DownloadVideoRecordResponse *p;
	size_t k = sizeof(struct ns__DownloadVideoRecordResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__DownloadVideoRecordResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__DownloadVideoRecordResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__DownloadVideoRecordResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__DownloadVideoRecordResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DownloadVideoRecordResponse(struct soap *soap, const struct ns__DownloadVideoRecordResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns__DownloadVideoRecordResponse(soap, tag?tag:"ns:DownloadVideoRecordResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__DownloadVideoRecordResponse * SOAP_FMAC4 soap_get_ns__DownloadVideoRecordResponse(struct soap *soap, struct ns__DownloadVideoRecordResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__DownloadVideoRecordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__PlayVideoRecord(struct soap *soap, struct ns__PlayVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
	a->Data = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__PlayVideoRecord(struct soap *soap, const struct ns__PlayVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_serialize_PointerTons__HBNET_VIDEO_STREAM(soap, &a->Data);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__PlayVideoRecord(struct soap *soap, const char *tag, int id, const struct ns__PlayVideoRecord *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__PlayVideoRecord), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	if (soap_out_PointerTons__HBNET_VIDEO_STREAM(soap, "Data", -1, &a->Data, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__PlayVideoRecord * SOAP_FMAC4 soap_in_ns__PlayVideoRecord(struct soap *soap, const char *tag, struct ns__PlayVideoRecord *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	size_t soap_flag_Data = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__PlayVideoRecord *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__PlayVideoRecord, sizeof(struct ns__PlayVideoRecord), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns__PlayVideoRecord(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap_flag_Data && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__HBNET_VIDEO_STREAM(soap, "Data", &a->Data, "ns:HBNET-VIDEO-STREAM"))
				{	soap_flag_Data--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__PlayVideoRecord *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__PlayVideoRecord, SOAP_TYPE_ns__PlayVideoRecord, sizeof(struct ns__PlayVideoRecord), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__PlayVideoRecord * SOAP_FMAC2 soap_instantiate_ns__PlayVideoRecord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__PlayVideoRecord(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__PlayVideoRecord *p;
	size_t k = sizeof(struct ns__PlayVideoRecord);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__PlayVideoRecord);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__PlayVideoRecord, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__PlayVideoRecord location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__PlayVideoRecord, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__PlayVideoRecord(struct soap *soap, const struct ns__PlayVideoRecord *a, const char *tag, const char *type)
{
	if (soap_out_ns__PlayVideoRecord(soap, tag?tag:"ns:PlayVideoRecord", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__PlayVideoRecord * SOAP_FMAC4 soap_get_ns__PlayVideoRecord(struct soap *soap, struct ns__PlayVideoRecord *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__PlayVideoRecord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryVideoRecord(struct soap *soap, struct ns__QueryVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
	a->Param = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryVideoRecord(struct soap *soap, const struct ns__QueryVideoRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_serialize_PointerTons__HBNET_RECOED_FILECOND(soap, &a->Param);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryVideoRecord(struct soap *soap, const char *tag, int id, const struct ns__QueryVideoRecord *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__QueryVideoRecord), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	if (soap_out_PointerTons__HBNET_RECOED_FILECOND(soap, "Param", -1, &a->Param, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__QueryVideoRecord * SOAP_FMAC4 soap_in_ns__QueryVideoRecord(struct soap *soap, const char *tag, struct ns__QueryVideoRecord *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	size_t soap_flag_Param = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__QueryVideoRecord *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__QueryVideoRecord, sizeof(struct ns__QueryVideoRecord), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns__QueryVideoRecord(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap_flag_Param && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__HBNET_RECOED_FILECOND(soap, "Param", &a->Param, "ns:HBNET-RECOED-FILECOND"))
				{	soap_flag_Param--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__QueryVideoRecord *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__QueryVideoRecord, SOAP_TYPE_ns__QueryVideoRecord, sizeof(struct ns__QueryVideoRecord), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__QueryVideoRecord * SOAP_FMAC2 soap_instantiate_ns__QueryVideoRecord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryVideoRecord(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__QueryVideoRecord *p;
	size_t k = sizeof(struct ns__QueryVideoRecord);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__QueryVideoRecord);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__QueryVideoRecord, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__QueryVideoRecord location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__QueryVideoRecord, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryVideoRecord(struct soap *soap, const struct ns__QueryVideoRecord *a, const char *tag, const char *type)
{
	if (soap_out_ns__QueryVideoRecord(soap, tag?tag:"ns:QueryVideoRecord", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__QueryVideoRecord * SOAP_FMAC4 soap_get_ns__QueryVideoRecord(struct soap *soap, struct ns__QueryVideoRecord *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryVideoRecord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryVideoRecordResponse(struct soap *soap, struct ns__QueryVideoRecordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->RecodeList);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryVideoRecordResponse(struct soap *soap, const struct ns__QueryVideoRecordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->RecodeList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryVideoRecordResponse(struct soap *soap, const char *tag, int id, const struct ns__QueryVideoRecordResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__QueryVideoRecordResponse), type))
		return soap->error;
	if (!a->RecodeList)
	{	if (soap_element_nil(soap, "RecodeList"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "RecodeList", -1, (char*const*)&a->RecodeList, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__QueryVideoRecordResponse * SOAP_FMAC4 soap_in_ns__QueryVideoRecordResponse(struct soap *soap, const char *tag, struct ns__QueryVideoRecordResponse *a, const char *type)
{
	size_t soap_flag_RecodeList = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__QueryVideoRecordResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__QueryVideoRecordResponse, sizeof(struct ns__QueryVideoRecordResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__QueryVideoRecordResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_RecodeList && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "RecodeList", (char**)&a->RecodeList, "xsd:string"))
				{	soap_flag_RecodeList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_RecodeList > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__QueryVideoRecordResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__QueryVideoRecordResponse, SOAP_TYPE_ns__QueryVideoRecordResponse, sizeof(struct ns__QueryVideoRecordResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__QueryVideoRecordResponse * SOAP_FMAC2 soap_instantiate_ns__QueryVideoRecordResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryVideoRecordResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__QueryVideoRecordResponse *p;
	size_t k = sizeof(struct ns__QueryVideoRecordResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__QueryVideoRecordResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__QueryVideoRecordResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__QueryVideoRecordResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__QueryVideoRecordResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryVideoRecordResponse(struct soap *soap, const struct ns__QueryVideoRecordResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns__QueryVideoRecordResponse(soap, tag?tag:"ns:QueryVideoRecordResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__QueryVideoRecordResponse * SOAP_FMAC4 soap_get_ns__QueryVideoRecordResponse(struct soap *soap, struct ns__QueryVideoRecordResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryVideoRecordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AbandonCameraStream(struct soap *soap, struct ns__AbandonCameraStream *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__AbandonCameraStream(struct soap *soap, const struct ns__AbandonCameraStream *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AbandonCameraStream(struct soap *soap, const char *tag, int id, const struct ns__AbandonCameraStream *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__AbandonCameraStream), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__AbandonCameraStream * SOAP_FMAC4 soap_in_ns__AbandonCameraStream(struct soap *soap, const char *tag, struct ns__AbandonCameraStream *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__AbandonCameraStream *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__AbandonCameraStream, sizeof(struct ns__AbandonCameraStream), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns__AbandonCameraStream(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__AbandonCameraStream *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__AbandonCameraStream, SOAP_TYPE_ns__AbandonCameraStream, sizeof(struct ns__AbandonCameraStream), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__AbandonCameraStream * SOAP_FMAC2 soap_instantiate_ns__AbandonCameraStream(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__AbandonCameraStream(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__AbandonCameraStream *p;
	size_t k = sizeof(struct ns__AbandonCameraStream);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__AbandonCameraStream);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__AbandonCameraStream, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__AbandonCameraStream location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__AbandonCameraStream, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AbandonCameraStream(struct soap *soap, const struct ns__AbandonCameraStream *a, const char *tag, const char *type)
{
	if (soap_out_ns__AbandonCameraStream(soap, tag?tag:"ns:AbandonCameraStream", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__AbandonCameraStream * SOAP_FMAC4 soap_get_ns__AbandonCameraStream(struct soap *soap, struct ns__AbandonCameraStream *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__AbandonCameraStream(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__PTZCtrlCamera(struct soap *soap, struct ns__PTZCtrlCamera *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
	a->Data = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__PTZCtrlCamera(struct soap *soap, const struct ns__PTZCtrlCamera *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_serialize_PointerTons__HBNET_CAMERA_PTZCTRL(soap, &a->Data);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__PTZCtrlCamera(struct soap *soap, const char *tag, int id, const struct ns__PTZCtrlCamera *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__PTZCtrlCamera), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	if (soap_out_PointerTons__HBNET_CAMERA_PTZCTRL(soap, "Data", -1, &a->Data, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__PTZCtrlCamera * SOAP_FMAC4 soap_in_ns__PTZCtrlCamera(struct soap *soap, const char *tag, struct ns__PTZCtrlCamera *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	size_t soap_flag_Data = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__PTZCtrlCamera *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__PTZCtrlCamera, sizeof(struct ns__PTZCtrlCamera), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns__PTZCtrlCamera(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap_flag_Data && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__HBNET_CAMERA_PTZCTRL(soap, "Data", &a->Data, "ns:HBNET-CAMERA-PTZCTRL"))
				{	soap_flag_Data--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__PTZCtrlCamera *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__PTZCtrlCamera, SOAP_TYPE_ns__PTZCtrlCamera, sizeof(struct ns__PTZCtrlCamera), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__PTZCtrlCamera * SOAP_FMAC2 soap_instantiate_ns__PTZCtrlCamera(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__PTZCtrlCamera(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__PTZCtrlCamera *p;
	size_t k = sizeof(struct ns__PTZCtrlCamera);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__PTZCtrlCamera);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__PTZCtrlCamera, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__PTZCtrlCamera location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__PTZCtrlCamera, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__PTZCtrlCamera(struct soap *soap, const struct ns__PTZCtrlCamera *a, const char *tag, const char *type)
{
	if (soap_out_ns__PTZCtrlCamera(soap, tag?tag:"ns:PTZCtrlCamera", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__PTZCtrlCamera * SOAP_FMAC4 soap_get_ns__PTZCtrlCamera(struct soap *soap, struct ns__PTZCtrlCamera *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__PTZCtrlCamera(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SwitchCameraToStream(struct soap *soap, struct ns__SwitchCameraToStream *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__HBUSERINFO(soap, &a->nsUserInfo);
	soap_default_long(soap, &a->CamID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SwitchCameraToStream(struct soap *soap, const struct ns__SwitchCameraToStream *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns__HBUSERINFO(soap, &a->nsUserInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SwitchCameraToStream(struct soap *soap, const char *tag, int id, const struct ns__SwitchCameraToStream *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__SwitchCameraToStream), type))
		return soap->error;
	if (soap_out_ns__HBUSERINFO(soap, "nsUserInfo", -1, &a->nsUserInfo, ""))
		return soap->error;
	if (soap_out_long(soap, "CamID", -1, &a->CamID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__SwitchCameraToStream * SOAP_FMAC4 soap_in_ns__SwitchCameraToStream(struct soap *soap, const char *tag, struct ns__SwitchCameraToStream *a, const char *type)
{
	size_t soap_flag_nsUserInfo = 1;
	size_t soap_flag_CamID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__SwitchCameraToStream *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__SwitchCameraToStream, sizeof(struct ns__SwitchCameraToStream), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns__SwitchCameraToStream(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nsUserInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__HBUSERINFO(soap, "nsUserInfo", &a->nsUserInfo, "ns:HBUSERINFO"))
				{	soap_flag_nsUserInfo--;
					continue;
				}
			if (soap_flag_CamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_long(soap, "CamID", &a->CamID, "xsd:long"))
				{	soap_flag_CamID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nsUserInfo > 0 || soap_flag_CamID > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__SwitchCameraToStream *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__SwitchCameraToStream, SOAP_TYPE_ns__SwitchCameraToStream, sizeof(struct ns__SwitchCameraToStream), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__SwitchCameraToStream * SOAP_FMAC2 soap_instantiate_ns__SwitchCameraToStream(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__SwitchCameraToStream(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__SwitchCameraToStream *p;
	size_t k = sizeof(struct ns__SwitchCameraToStream);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__SwitchCameraToStream);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__SwitchCameraToStream, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__SwitchCameraToStream location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__SwitchCameraToStream, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SwitchCameraToStream(struct soap *soap, const struct ns__SwitchCameraToStream *a, const char *tag, const char *type)
{
	if (soap_out_ns__SwitchCameraToStream(soap, tag?tag:"ns:SwitchCameraToStream", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__SwitchCameraToStream * SOAP_FMAC4 soap_get_ns__SwitchCameraToStream(struct soap *soap, struct ns__SwitchCameraToStream *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__SwitchCameraToStream(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns_HeartBeat(struct soap *soap, struct ns_HeartBeat *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->strUser);
	soap_default_unsignedLong(soap, &a->ulCameraID);
	soap_default_int(soap, &a->nPlayType);
	soap_default_std__string(soap, &a->strFileName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns_HeartBeat(struct soap *soap, const struct ns_HeartBeat *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->strUser, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->strUser);
	soap_embedded(soap, &a->strFileName, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->strFileName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns_HeartBeat(struct soap *soap, const char *tag, int id, const struct ns_HeartBeat *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns_HeartBeat), type))
		return soap->error;
	if (soap_out_std__string(soap, "strUser", -1, &a->strUser, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulCameraID", -1, &a->ulCameraID, ""))
		return soap->error;
	if (soap_out_int(soap, "nPlayType", -1, &a->nPlayType, ""))
		return soap->error;
	if (soap_out_std__string(soap, "strFileName", -1, &a->strFileName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns_HeartBeat * SOAP_FMAC4 soap_in_ns_HeartBeat(struct soap *soap, const char *tag, struct ns_HeartBeat *a, const char *type)
{
	size_t soap_flag_strUser = 1;
	size_t soap_flag_ulCameraID = 1;
	size_t soap_flag_nPlayType = 1;
	size_t soap_flag_strFileName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns_HeartBeat *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns_HeartBeat, sizeof(struct ns_HeartBeat), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns_HeartBeat(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strUser && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strUser", &a->strUser, "xsd:string"))
				{	soap_flag_strUser--;
					continue;
				}
			if (soap_flag_ulCameraID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulCameraID", &a->ulCameraID, "xsd:unsignedLong"))
				{	soap_flag_ulCameraID--;
					continue;
				}
			if (soap_flag_nPlayType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nPlayType", &a->nPlayType, "xsd:int"))
				{	soap_flag_nPlayType--;
					continue;
				}
			if (soap_flag_strFileName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strFileName", &a->strFileName, "xsd:string"))
				{	soap_flag_strFileName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_strUser > 0 || soap_flag_ulCameraID > 0 || soap_flag_nPlayType > 0 || soap_flag_strFileName > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns_HeartBeat *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns_HeartBeat, SOAP_TYPE_ns_HeartBeat, sizeof(struct ns_HeartBeat), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns_HeartBeat * SOAP_FMAC2 soap_instantiate_ns_HeartBeat(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns_HeartBeat(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns_HeartBeat *p;
	size_t k = sizeof(struct ns_HeartBeat);
	if (n < 0)
	{	p = SOAP_NEW(struct ns_HeartBeat);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns_HeartBeat, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns_HeartBeat location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns_HeartBeat, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns_HeartBeat(struct soap *soap, const struct ns_HeartBeat *a, const char *tag, const char *type)
{
	if (soap_out_ns_HeartBeat(soap, tag?tag:"ns-HeartBeat", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns_HeartBeat * SOAP_FMAC4 soap_get_ns_HeartBeat(struct soap *soap, struct ns_HeartBeat *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns_HeartBeat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBUSERINFO(struct soap *soap, struct ns__HBUSERINFO *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->strUser);
	soap_default_int(soap, &a->nPermission);
	soap_default_int(soap, &a->nCtrlTimeOut);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBUSERINFO(struct soap *soap, const struct ns__HBUSERINFO *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->strUser, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->strUser);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBUSERINFO(struct soap *soap, const char *tag, int id, const struct ns__HBUSERINFO *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBUSERINFO), type))
		return soap->error;
	if (soap_out_std__string(soap, "strUser", -1, &a->strUser, ""))
		return soap->error;
	if (soap_out_int(soap, "nPermission", -1, &a->nPermission, ""))
		return soap->error;
	if (soap_out_int(soap, "nCtrlTimeOut", -1, &a->nCtrlTimeOut, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBUSERINFO * SOAP_FMAC4 soap_in_ns__HBUSERINFO(struct soap *soap, const char *tag, struct ns__HBUSERINFO *a, const char *type)
{
	size_t soap_flag_strUser = 1;
	size_t soap_flag_nPermission = 1;
	size_t soap_flag_nCtrlTimeOut = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBUSERINFO *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBUSERINFO, sizeof(struct ns__HBUSERINFO), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns__HBUSERINFO(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strUser && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strUser", &a->strUser, "xsd:string"))
				{	soap_flag_strUser--;
					continue;
				}
			if (soap_flag_nPermission && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nPermission", &a->nPermission, "xsd:int"))
				{	soap_flag_nPermission--;
					continue;
				}
			if (soap_flag_nCtrlTimeOut && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nCtrlTimeOut", &a->nCtrlTimeOut, "xsd:int"))
				{	soap_flag_nCtrlTimeOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_strUser > 0 || soap_flag_nPermission > 0 || soap_flag_nCtrlTimeOut > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__HBUSERINFO *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBUSERINFO, SOAP_TYPE_ns__HBUSERINFO, sizeof(struct ns__HBUSERINFO), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__HBUSERINFO * SOAP_FMAC2 soap_instantiate_ns__HBUSERINFO(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBUSERINFO(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__HBUSERINFO *p;
	size_t k = sizeof(struct ns__HBUSERINFO);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__HBUSERINFO);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__HBUSERINFO, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__HBUSERINFO location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__HBUSERINFO, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBUSERINFO(struct soap *soap, const struct ns__HBUSERINFO *a, const char *tag, const char *type)
{
	if (soap_out_ns__HBUSERINFO(soap, tag?tag:"ns:HBUSERINFO", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBUSERINFO * SOAP_FMAC4 soap_get_ns__HBUSERINFO(struct soap *soap, struct ns__HBUSERINFO *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBUSERINFO(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBNET_CAMREA_INFO(struct soap *soap, struct ns__HBNET_CAMREA_INFO *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedLong(soap, &a->ulCamNumber);
	soap_default_unsignedLong(soap, &a->ulCamID);
	soap_default_unsignedLong(soap, &a->ulCamDepartmentID);
	soap_default_std__string(soap, &a->strCamName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBNET_CAMREA_INFO(struct soap *soap, const struct ns__HBNET_CAMREA_INFO *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->strCamName, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->strCamName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBNET_CAMREA_INFO(struct soap *soap, const char *tag, int id, const struct ns__HBNET_CAMREA_INFO *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBNET_CAMREA_INFO), type))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulCamNumber", -1, &a->ulCamNumber, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulCamID", -1, &a->ulCamID, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulCamDepartmentID", -1, &a->ulCamDepartmentID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "strCamName", -1, &a->strCamName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBNET_CAMREA_INFO * SOAP_FMAC4 soap_in_ns__HBNET_CAMREA_INFO(struct soap *soap, const char *tag, struct ns__HBNET_CAMREA_INFO *a, const char *type)
{
	size_t soap_flag_ulCamNumber = 1;
	size_t soap_flag_ulCamID = 1;
	size_t soap_flag_ulCamDepartmentID = 1;
	size_t soap_flag_strCamName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBNET_CAMREA_INFO *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBNET_CAMREA_INFO, sizeof(struct ns__HBNET_CAMREA_INFO), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns__HBNET_CAMREA_INFO(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ulCamNumber && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulCamNumber", &a->ulCamNumber, "xsd:unsignedLong"))
				{	soap_flag_ulCamNumber--;
					continue;
				}
			if (soap_flag_ulCamID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulCamID", &a->ulCamID, "xsd:unsignedLong"))
				{	soap_flag_ulCamID--;
					continue;
				}
			if (soap_flag_ulCamDepartmentID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulCamDepartmentID", &a->ulCamDepartmentID, "xsd:unsignedLong"))
				{	soap_flag_ulCamDepartmentID--;
					continue;
				}
			if (soap_flag_strCamName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strCamName", &a->strCamName, "xsd:string"))
				{	soap_flag_strCamName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ulCamNumber > 0 || soap_flag_ulCamID > 0 || soap_flag_ulCamDepartmentID > 0 || soap_flag_strCamName > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__HBNET_CAMREA_INFO *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBNET_CAMREA_INFO, SOAP_TYPE_ns__HBNET_CAMREA_INFO, sizeof(struct ns__HBNET_CAMREA_INFO), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__HBNET_CAMREA_INFO * SOAP_FMAC2 soap_instantiate_ns__HBNET_CAMREA_INFO(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBNET_CAMREA_INFO(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__HBNET_CAMREA_INFO *p;
	size_t k = sizeof(struct ns__HBNET_CAMREA_INFO);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__HBNET_CAMREA_INFO);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__HBNET_CAMREA_INFO, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__HBNET_CAMREA_INFO location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__HBNET_CAMREA_INFO, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBNET_CAMREA_INFO(struct soap *soap, const struct ns__HBNET_CAMREA_INFO *a, const char *tag, const char *type)
{
	if (soap_out_ns__HBNET_CAMREA_INFO(soap, tag?tag:"ns:HBNET-CAMREA-INFO", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_CAMREA_INFO * SOAP_FMAC4 soap_get_ns__HBNET_CAMREA_INFO(struct soap *soap, struct ns__HBNET_CAMREA_INFO *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBNET_CAMREA_INFO(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBNET_RECOED_FILECOND(struct soap *soap, struct ns__HBNET_RECOED_FILECOND *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedLong(soap, &a->ulCamNumber);
	soap_default_unsignedLong(soap, &a->ulStartTime);
	soap_default_unsignedLong(soap, &a->ulStopTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBNET_RECOED_FILECOND(struct soap *soap, const struct ns__HBNET_RECOED_FILECOND *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBNET_RECOED_FILECOND(struct soap *soap, const char *tag, int id, const struct ns__HBNET_RECOED_FILECOND *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBNET_RECOED_FILECOND), type))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulCamNumber", -1, &a->ulCamNumber, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulStartTime", -1, &a->ulStartTime, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulStopTime", -1, &a->ulStopTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBNET_RECOED_FILECOND * SOAP_FMAC4 soap_in_ns__HBNET_RECOED_FILECOND(struct soap *soap, const char *tag, struct ns__HBNET_RECOED_FILECOND *a, const char *type)
{
	size_t soap_flag_ulCamNumber = 1;
	size_t soap_flag_ulStartTime = 1;
	size_t soap_flag_ulStopTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBNET_RECOED_FILECOND *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBNET_RECOED_FILECOND, sizeof(struct ns__HBNET_RECOED_FILECOND), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__HBNET_RECOED_FILECOND(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ulCamNumber && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulCamNumber", &a->ulCamNumber, "xsd:unsignedLong"))
				{	soap_flag_ulCamNumber--;
					continue;
				}
			if (soap_flag_ulStartTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulStartTime", &a->ulStartTime, "xsd:unsignedLong"))
				{	soap_flag_ulStartTime--;
					continue;
				}
			if (soap_flag_ulStopTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulStopTime", &a->ulStopTime, "xsd:unsignedLong"))
				{	soap_flag_ulStopTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ulCamNumber > 0 || soap_flag_ulStartTime > 0 || soap_flag_ulStopTime > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__HBNET_RECOED_FILECOND *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBNET_RECOED_FILECOND, SOAP_TYPE_ns__HBNET_RECOED_FILECOND, sizeof(struct ns__HBNET_RECOED_FILECOND), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__HBNET_RECOED_FILECOND * SOAP_FMAC2 soap_instantiate_ns__HBNET_RECOED_FILECOND(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBNET_RECOED_FILECOND(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__HBNET_RECOED_FILECOND *p;
	size_t k = sizeof(struct ns__HBNET_RECOED_FILECOND);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__HBNET_RECOED_FILECOND);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__HBNET_RECOED_FILECOND, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__HBNET_RECOED_FILECOND location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__HBNET_RECOED_FILECOND, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBNET_RECOED_FILECOND(struct soap *soap, const struct ns__HBNET_RECOED_FILECOND *a, const char *tag, const char *type)
{
	if (soap_out_ns__HBNET_RECOED_FILECOND(soap, tag?tag:"ns:HBNET-RECOED-FILECOND", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_RECOED_FILECOND * SOAP_FMAC4 soap_get_ns__HBNET_RECOED_FILECOND(struct soap *soap, struct ns__HBNET_RECOED_FILECOND *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBNET_RECOED_FILECOND(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBNET_RECOED_PLAYCTRL(struct soap *soap, struct ns__HBNET_RECOED_PLAYCTRL *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedLong(soap, &a->ulControlCode);
	soap_default_unsignedLong(soap, &a->ulInValue);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBNET_RECOED_PLAYCTRL(struct soap *soap, const struct ns__HBNET_RECOED_PLAYCTRL *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBNET_RECOED_PLAYCTRL(struct soap *soap, const char *tag, int id, const struct ns__HBNET_RECOED_PLAYCTRL *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL), type))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulControlCode", -1, &a->ulControlCode, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulInValue", -1, &a->ulInValue, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBNET_RECOED_PLAYCTRL * SOAP_FMAC4 soap_in_ns__HBNET_RECOED_PLAYCTRL(struct soap *soap, const char *tag, struct ns__HBNET_RECOED_PLAYCTRL *a, const char *type)
{
	size_t soap_flag_ulControlCode = 1;
	size_t soap_flag_ulInValue = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBNET_RECOED_PLAYCTRL *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL, sizeof(struct ns__HBNET_RECOED_PLAYCTRL), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__HBNET_RECOED_PLAYCTRL(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ulControlCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulControlCode", &a->ulControlCode, "xsd:unsignedLong"))
				{	soap_flag_ulControlCode--;
					continue;
				}
			if (soap_flag_ulInValue && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulInValue", &a->ulInValue, "xsd:unsignedLong"))
				{	soap_flag_ulInValue--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ulControlCode > 0 || soap_flag_ulInValue > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__HBNET_RECOED_PLAYCTRL *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL, SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL, sizeof(struct ns__HBNET_RECOED_PLAYCTRL), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__HBNET_RECOED_PLAYCTRL * SOAP_FMAC2 soap_instantiate_ns__HBNET_RECOED_PLAYCTRL(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBNET_RECOED_PLAYCTRL(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__HBNET_RECOED_PLAYCTRL *p;
	size_t k = sizeof(struct ns__HBNET_RECOED_PLAYCTRL);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__HBNET_RECOED_PLAYCTRL);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__HBNET_RECOED_PLAYCTRL, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__HBNET_RECOED_PLAYCTRL location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__HBNET_RECOED_PLAYCTRL, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBNET_RECOED_PLAYCTRL(struct soap *soap, const struct ns__HBNET_RECOED_PLAYCTRL *a, const char *tag, const char *type)
{
	if (soap_out_ns__HBNET_RECOED_PLAYCTRL(soap, tag?tag:"ns:HBNET-RECOED-PLAYCTRL", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_RECOED_PLAYCTRL * SOAP_FMAC4 soap_get_ns__HBNET_RECOED_PLAYCTRL(struct soap *soap, struct ns__HBNET_RECOED_PLAYCTRL *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBNET_RECOED_PLAYCTRL(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBNET_CAMERA_PTZCTRL(struct soap *soap, struct ns__HBNET_CAMERA_PTZCTRL *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedLong(soap, &a->ulCamNumber);
	soap_default_unsignedLong(soap, &a->ulVS1);
	soap_default_unsignedLong(soap, &a->ulVS2);
	soap_default_unsignedLong(soap, &a->ulVS3);
	soap_default_unsignedLong(soap, &a->ulVS4);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBNET_CAMERA_PTZCTRL(struct soap *soap, const struct ns__HBNET_CAMERA_PTZCTRL *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBNET_CAMERA_PTZCTRL(struct soap *soap, const char *tag, int id, const struct ns__HBNET_CAMERA_PTZCTRL *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL), type))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulCamNumber", -1, &a->ulCamNumber, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulVS1", -1, &a->ulVS1, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulVS2", -1, &a->ulVS2, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulVS3", -1, &a->ulVS3, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "ulVS4", -1, &a->ulVS4, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBNET_CAMERA_PTZCTRL * SOAP_FMAC4 soap_in_ns__HBNET_CAMERA_PTZCTRL(struct soap *soap, const char *tag, struct ns__HBNET_CAMERA_PTZCTRL *a, const char *type)
{
	size_t soap_flag_ulCamNumber = 1;
	size_t soap_flag_ulVS1 = 1;
	size_t soap_flag_ulVS2 = 1;
	size_t soap_flag_ulVS3 = 1;
	size_t soap_flag_ulVS4 = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBNET_CAMERA_PTZCTRL *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL, sizeof(struct ns__HBNET_CAMERA_PTZCTRL), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__HBNET_CAMERA_PTZCTRL(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ulCamNumber && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulCamNumber", &a->ulCamNumber, "xsd:unsignedLong"))
				{	soap_flag_ulCamNumber--;
					continue;
				}
			if (soap_flag_ulVS1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulVS1", &a->ulVS1, "xsd:unsignedLong"))
				{	soap_flag_ulVS1--;
					continue;
				}
			if (soap_flag_ulVS2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulVS2", &a->ulVS2, "xsd:unsignedLong"))
				{	soap_flag_ulVS2--;
					continue;
				}
			if (soap_flag_ulVS3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulVS3", &a->ulVS3, "xsd:unsignedLong"))
				{	soap_flag_ulVS3--;
					continue;
				}
			if (soap_flag_ulVS4 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "ulVS4", &a->ulVS4, "xsd:unsignedLong"))
				{	soap_flag_ulVS4--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ulCamNumber > 0 || soap_flag_ulVS1 > 0 || soap_flag_ulVS2 > 0 || soap_flag_ulVS3 > 0 || soap_flag_ulVS4 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__HBNET_CAMERA_PTZCTRL *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL, SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL, sizeof(struct ns__HBNET_CAMERA_PTZCTRL), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__HBNET_CAMERA_PTZCTRL * SOAP_FMAC2 soap_instantiate_ns__HBNET_CAMERA_PTZCTRL(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBNET_CAMERA_PTZCTRL(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__HBNET_CAMERA_PTZCTRL *p;
	size_t k = sizeof(struct ns__HBNET_CAMERA_PTZCTRL);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__HBNET_CAMERA_PTZCTRL);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__HBNET_CAMERA_PTZCTRL, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__HBNET_CAMERA_PTZCTRL location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBNET_CAMERA_PTZCTRL(struct soap *soap, const struct ns__HBNET_CAMERA_PTZCTRL *a, const char *tag, const char *type)
{
	if (soap_out_ns__HBNET_CAMERA_PTZCTRL(soap, tag?tag:"ns:HBNET-CAMERA-PTZCTRL", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_CAMERA_PTZCTRL * SOAP_FMAC4 soap_get_ns__HBNET_CAMERA_PTZCTRL(struct soap *soap, struct ns__HBNET_CAMERA_PTZCTRL *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBNET_CAMERA_PTZCTRL(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBNET_VIDEO_STREAM_RESP(struct soap *soap, struct ns__HBNET_VIDEO_STREAM_RESP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->vsfStreamType);
	soap_default_string(soap, &a->szDescription);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBNET_VIDEO_STREAM_RESP(struct soap *soap, const struct ns__HBNET_VIDEO_STREAM_RESP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->szDescription);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBNET_VIDEO_STREAM_RESP(struct soap *soap, const char *tag, int id, const struct ns__HBNET_VIDEO_STREAM_RESP *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP), type))
		return soap->error;
	if (soap_out_int(soap, "vsfStreamType", -1, &a->vsfStreamType, ""))
		return soap->error;
	if (soap_out_string(soap, "szDescription", -1, (char*const*)&a->szDescription, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBNET_VIDEO_STREAM_RESP * SOAP_FMAC4 soap_in_ns__HBNET_VIDEO_STREAM_RESP(struct soap *soap, const char *tag, struct ns__HBNET_VIDEO_STREAM_RESP *a, const char *type)
{
	size_t soap_flag_vsfStreamType = 1;
	size_t soap_flag_szDescription = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBNET_VIDEO_STREAM_RESP *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP, sizeof(struct ns__HBNET_VIDEO_STREAM_RESP), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__HBNET_VIDEO_STREAM_RESP(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_vsfStreamType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "vsfStreamType", &a->vsfStreamType, "xsd:int"))
				{	soap_flag_vsfStreamType--;
					continue;
				}
			if (soap_flag_szDescription && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "szDescription", (char**)&a->szDescription, "xsd:string"))
				{	soap_flag_szDescription--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_vsfStreamType > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__HBNET_VIDEO_STREAM_RESP *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP, SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP, sizeof(struct ns__HBNET_VIDEO_STREAM_RESP), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__HBNET_VIDEO_STREAM_RESP * SOAP_FMAC2 soap_instantiate_ns__HBNET_VIDEO_STREAM_RESP(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBNET_VIDEO_STREAM_RESP(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__HBNET_VIDEO_STREAM_RESP *p;
	size_t k = sizeof(struct ns__HBNET_VIDEO_STREAM_RESP);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__HBNET_VIDEO_STREAM_RESP);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__HBNET_VIDEO_STREAM_RESP, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__HBNET_VIDEO_STREAM_RESP location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBNET_VIDEO_STREAM_RESP(struct soap *soap, const struct ns__HBNET_VIDEO_STREAM_RESP *a, const char *tag, const char *type)
{
	if (soap_out_ns__HBNET_VIDEO_STREAM_RESP(soap, tag?tag:"ns:HBNET-VIDEO-STREAM-RESP", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_VIDEO_STREAM_RESP * SOAP_FMAC4 soap_get_ns__HBNET_VIDEO_STREAM_RESP(struct soap *soap, struct ns__HBNET_VIDEO_STREAM_RESP *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBNET_VIDEO_STREAM_RESP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__HBNET_VIDEO_STREAM(struct soap *soap, struct ns__HBNET_VIDEO_STREAM *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->vsfStreamType);
	soap_default_string(soap, &a->szDescription);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__HBNET_VIDEO_STREAM(struct soap *soap, const struct ns__HBNET_VIDEO_STREAM *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->szDescription);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__HBNET_VIDEO_STREAM(struct soap *soap, const char *tag, int id, const struct ns__HBNET_VIDEO_STREAM *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__HBNET_VIDEO_STREAM), type))
		return soap->error;
	if (soap_out_int(soap, "vsfStreamType", -1, &a->vsfStreamType, ""))
		return soap->error;
	if (soap_out_string(soap, "szDescription", -1, (char*const*)&a->szDescription, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__HBNET_VIDEO_STREAM * SOAP_FMAC4 soap_in_ns__HBNET_VIDEO_STREAM(struct soap *soap, const char *tag, struct ns__HBNET_VIDEO_STREAM *a, const char *type)
{
	size_t soap_flag_vsfStreamType = 1;
	size_t soap_flag_szDescription = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__HBNET_VIDEO_STREAM *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__HBNET_VIDEO_STREAM, sizeof(struct ns__HBNET_VIDEO_STREAM), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__HBNET_VIDEO_STREAM(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_vsfStreamType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "vsfStreamType", &a->vsfStreamType, "xsd:int"))
				{	soap_flag_vsfStreamType--;
					continue;
				}
			if (soap_flag_szDescription && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "szDescription", (char**)&a->szDescription, "xsd:string"))
				{	soap_flag_szDescription--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_vsfStreamType > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__HBNET_VIDEO_STREAM *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__HBNET_VIDEO_STREAM, SOAP_TYPE_ns__HBNET_VIDEO_STREAM, sizeof(struct ns__HBNET_VIDEO_STREAM), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__HBNET_VIDEO_STREAM * SOAP_FMAC2 soap_instantiate_ns__HBNET_VIDEO_STREAM(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__HBNET_VIDEO_STREAM(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__HBNET_VIDEO_STREAM *p;
	size_t k = sizeof(struct ns__HBNET_VIDEO_STREAM);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__HBNET_VIDEO_STREAM);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__HBNET_VIDEO_STREAM, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__HBNET_VIDEO_STREAM location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__HBNET_VIDEO_STREAM, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__HBNET_VIDEO_STREAM(struct soap *soap, const struct ns__HBNET_VIDEO_STREAM *a, const char *tag, const char *type)
{
	if (soap_out_ns__HBNET_VIDEO_STREAM(soap, tag?tag:"ns:HBNET-VIDEO-STREAM", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_VIDEO_STREAM * SOAP_FMAC4 soap_get_ns__HBNET_VIDEO_STREAM(struct soap *soap, struct ns__HBNET_VIDEO_STREAM *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__HBNET_VIDEO_STREAM(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Response(struct soap *soap, struct ns__Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->retcode);
	soap_default_std__string(soap, &a->strMessage);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Response(struct soap *soap, const struct ns__Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->strMessage, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->strMessage);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Response(struct soap *soap, const char *tag, int id, const struct ns__Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Response), type))
		return soap->error;
	if (soap_out_int(soap, "retcode", -1, &a->retcode, ""))
		return soap->error;
	if (soap_out_std__string(soap, "strMessage", -1, &a->strMessage, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Response * SOAP_FMAC4 soap_in_ns__Response(struct soap *soap, const char *tag, struct ns__Response *a, const char *type)
{
	size_t soap_flag_retcode = 1;
	size_t soap_flag_strMessage = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Response *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Response, sizeof(struct ns__Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns__Response(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_retcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "retcode", &a->retcode, "xsd:int"))
				{	soap_flag_retcode--;
					continue;
				}
			if (soap_flag_strMessage && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strMessage", &a->strMessage, "xsd:string"))
				{	soap_flag_strMessage--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_retcode > 0 || soap_flag_strMessage > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Response, SOAP_TYPE_ns__Response, sizeof(struct ns__Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__Response * SOAP_FMAC2 soap_instantiate_ns__Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Response(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__Response *p;
	size_t k = sizeof(struct ns__Response);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__Response location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__Response, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Response(struct soap *soap, const struct ns__Response *a, const char *tag, const char *type)
{
	if (soap_out_ns__Response(soap, tag?tag:"ns:Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Response * SOAP_FMAC4 soap_get_ns__Response(struct soap *soap, struct ns__Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTonsCXF__getDataCxfResponse(struct soap *soap, nsCXF__getDataCxfResponse *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_nsCXF__getDataCxfResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTonsCXF__getDataCxfResponse(struct soap *soap, const char *tag, int id, nsCXF__getDataCxfResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_nsCXF__getDataCxfResponse, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 nsCXF__getDataCxfResponse ** SOAP_FMAC4 soap_in_PointerTonsCXF__getDataCxfResponse(struct soap *soap, const char *tag, nsCXF__getDataCxfResponse **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (nsCXF__getDataCxfResponse **)soap_malloc(soap, sizeof(nsCXF__getDataCxfResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (nsCXF__getDataCxfResponse *)soap_instantiate_nsCXF__getDataCxfResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (nsCXF__getDataCxfResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_nsCXF__getDataCxfResponse, sizeof(nsCXF__getDataCxfResponse), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTonsCXF__getDataCxfResponse(struct soap *soap, nsCXF__getDataCxfResponse *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTonsCXF__getDataCxfResponse(soap, tag?tag:"nsCXF:getDataCxfResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 nsCXF__getDataCxfResponse ** SOAP_FMAC4 soap_get_PointerTonsCXF__getDataCxfResponse(struct soap *soap, nsCXF__getDataCxfResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTonsCXF__getDataCxfResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTonsCXF__getDataCxf(struct soap *soap, nsCXF__getDataCxf *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_nsCXF__getDataCxf))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTonsCXF__getDataCxf(struct soap *soap, const char *tag, int id, nsCXF__getDataCxf *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_nsCXF__getDataCxf, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 nsCXF__getDataCxf ** SOAP_FMAC4 soap_in_PointerTonsCXF__getDataCxf(struct soap *soap, const char *tag, nsCXF__getDataCxf **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (nsCXF__getDataCxf **)soap_malloc(soap, sizeof(nsCXF__getDataCxf *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (nsCXF__getDataCxf *)soap_instantiate_nsCXF__getDataCxf(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (nsCXF__getDataCxf **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_nsCXF__getDataCxf, sizeof(nsCXF__getDataCxf), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTonsCXF__getDataCxf(struct soap *soap, nsCXF__getDataCxf *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTonsCXF__getDataCxf(soap, tag?tag:"nsCXF:getDataCxf", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 nsCXF__getDataCxf ** SOAP_FMAC4 soap_get_PointerTonsCXF__getDataCxf(struct soap *soap, nsCXF__getDataCxf **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTonsCXF__getDataCxf(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getDataResponse(struct soap *soap, _ns1__getDataResponse *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getDataResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getDataResponse(struct soap *soap, const char *tag, int id, _ns1__getDataResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getDataResponse, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getDataResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getDataResponse(struct soap *soap, const char *tag, _ns1__getDataResponse **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getDataResponse **)soap_malloc(soap, sizeof(_ns1__getDataResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getDataResponse *)soap_instantiate__ns1__getDataResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__getDataResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getDataResponse, sizeof(_ns1__getDataResponse), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getDataResponse(struct soap *soap, _ns1__getDataResponse *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__getDataResponse(soap, tag?tag:"ns1:getDataResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getDataResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getDataResponse(struct soap *soap, _ns1__getDataResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getData(struct soap *soap, _ns1__getData *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getData(struct soap *soap, const char *tag, int id, _ns1__getData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getData, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getData ** SOAP_FMAC4 soap_in_PointerTo_ns1__getData(struct soap *soap, const char *tag, _ns1__getData **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getData **)soap_malloc(soap, sizeof(_ns1__getData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getData *)soap_instantiate__ns1__getData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__getData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getData, sizeof(_ns1__getData), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getData(struct soap *soap, _ns1__getData *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__getData(soap, tag?tag:"ns1:getData", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getData ** SOAP_FMAC4 soap_get_PointerTo_ns1__getData(struct soap *soap, _ns1__getData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__HBNET_VIDEO_STREAM_RESP(struct soap *soap, struct ns__HBNET_VIDEO_STREAM_RESP *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP))
		soap_serialize_ns__HBNET_VIDEO_STREAM_RESP(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__HBNET_VIDEO_STREAM_RESP(struct soap *soap, const char *tag, int id, struct ns__HBNET_VIDEO_STREAM_RESP *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ns__HBNET_VIDEO_STREAM_RESP(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__HBNET_VIDEO_STREAM_RESP ** SOAP_FMAC4 soap_in_PointerTons__HBNET_VIDEO_STREAM_RESP(struct soap *soap, const char *tag, struct ns__HBNET_VIDEO_STREAM_RESP **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__HBNET_VIDEO_STREAM_RESP **)soap_malloc(soap, sizeof(struct ns__HBNET_VIDEO_STREAM_RESP *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__HBNET_VIDEO_STREAM_RESP(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__HBNET_VIDEO_STREAM_RESP **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__HBNET_VIDEO_STREAM_RESP, sizeof(struct ns__HBNET_VIDEO_STREAM_RESP), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__HBNET_VIDEO_STREAM_RESP(struct soap *soap, struct ns__HBNET_VIDEO_STREAM_RESP *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons__HBNET_VIDEO_STREAM_RESP(soap, tag?tag:"ns:HBNET-VIDEO-STREAM-RESP", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_VIDEO_STREAM_RESP ** SOAP_FMAC4 soap_get_PointerTons__HBNET_VIDEO_STREAM_RESP(struct soap *soap, struct ns__HBNET_VIDEO_STREAM_RESP **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__HBNET_VIDEO_STREAM_RESP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__HBNET_RECOED_FILECOND(struct soap *soap, struct ns__HBNET_RECOED_FILECOND *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__HBNET_RECOED_FILECOND))
		soap_serialize_ns__HBNET_RECOED_FILECOND(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__HBNET_RECOED_FILECOND(struct soap *soap, const char *tag, int id, struct ns__HBNET_RECOED_FILECOND *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__HBNET_RECOED_FILECOND, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ns__HBNET_RECOED_FILECOND(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__HBNET_RECOED_FILECOND ** SOAP_FMAC4 soap_in_PointerTons__HBNET_RECOED_FILECOND(struct soap *soap, const char *tag, struct ns__HBNET_RECOED_FILECOND **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__HBNET_RECOED_FILECOND **)soap_malloc(soap, sizeof(struct ns__HBNET_RECOED_FILECOND *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__HBNET_RECOED_FILECOND(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__HBNET_RECOED_FILECOND **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__HBNET_RECOED_FILECOND, sizeof(struct ns__HBNET_RECOED_FILECOND), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__HBNET_RECOED_FILECOND(struct soap *soap, struct ns__HBNET_RECOED_FILECOND *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons__HBNET_RECOED_FILECOND(soap, tag?tag:"ns:HBNET-RECOED-FILECOND", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_RECOED_FILECOND ** SOAP_FMAC4 soap_get_PointerTons__HBNET_RECOED_FILECOND(struct soap *soap, struct ns__HBNET_RECOED_FILECOND **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__HBNET_RECOED_FILECOND(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__Response(struct soap *soap, struct ns__Response *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__Response))
		soap_serialize_ns__Response(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__Response(struct soap *soap, const char *tag, int id, struct ns__Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__Response, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ns__Response(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__Response ** SOAP_FMAC4 soap_in_PointerTons__Response(struct soap *soap, const char *tag, struct ns__Response **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__Response **)soap_malloc(soap, sizeof(struct ns__Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__Response(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__Response, sizeof(struct ns__Response), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__Response(struct soap *soap, struct ns__Response *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons__Response(soap, tag?tag:"ns:Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Response ** SOAP_FMAC4 soap_get_PointerTons__Response(struct soap *soap, struct ns__Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__HBNET_CAMERA_PTZCTRL(struct soap *soap, struct ns__HBNET_CAMERA_PTZCTRL *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL))
		soap_serialize_ns__HBNET_CAMERA_PTZCTRL(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__HBNET_CAMERA_PTZCTRL(struct soap *soap, const char *tag, int id, struct ns__HBNET_CAMERA_PTZCTRL *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ns__HBNET_CAMERA_PTZCTRL(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__HBNET_CAMERA_PTZCTRL ** SOAP_FMAC4 soap_in_PointerTons__HBNET_CAMERA_PTZCTRL(struct soap *soap, const char *tag, struct ns__HBNET_CAMERA_PTZCTRL **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__HBNET_CAMERA_PTZCTRL **)soap_malloc(soap, sizeof(struct ns__HBNET_CAMERA_PTZCTRL *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__HBNET_CAMERA_PTZCTRL(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__HBNET_CAMERA_PTZCTRL **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__HBNET_CAMERA_PTZCTRL, sizeof(struct ns__HBNET_CAMERA_PTZCTRL), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__HBNET_CAMERA_PTZCTRL(struct soap *soap, struct ns__HBNET_CAMERA_PTZCTRL *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons__HBNET_CAMERA_PTZCTRL(soap, tag?tag:"ns:HBNET-CAMERA-PTZCTRL", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_CAMERA_PTZCTRL ** SOAP_FMAC4 soap_get_PointerTons__HBNET_CAMERA_PTZCTRL(struct soap *soap, struct ns__HBNET_CAMERA_PTZCTRL **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__HBNET_CAMERA_PTZCTRL(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__HBNET_VIDEO_STREAM(struct soap *soap, struct ns__HBNET_VIDEO_STREAM *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__HBNET_VIDEO_STREAM))
		soap_serialize_ns__HBNET_VIDEO_STREAM(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__HBNET_VIDEO_STREAM(struct soap *soap, const char *tag, int id, struct ns__HBNET_VIDEO_STREAM *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__HBNET_VIDEO_STREAM, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ns__HBNET_VIDEO_STREAM(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__HBNET_VIDEO_STREAM ** SOAP_FMAC4 soap_in_PointerTons__HBNET_VIDEO_STREAM(struct soap *soap, const char *tag, struct ns__HBNET_VIDEO_STREAM **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__HBNET_VIDEO_STREAM **)soap_malloc(soap, sizeof(struct ns__HBNET_VIDEO_STREAM *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__HBNET_VIDEO_STREAM(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__HBNET_VIDEO_STREAM **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__HBNET_VIDEO_STREAM, sizeof(struct ns__HBNET_VIDEO_STREAM), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__HBNET_VIDEO_STREAM(struct soap *soap, struct ns__HBNET_VIDEO_STREAM *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons__HBNET_VIDEO_STREAM(soap, tag?tag:"ns:HBNET-VIDEO-STREAM", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__HBNET_VIDEO_STREAM ** SOAP_FMAC4 soap_get_PointerTons__HBNET_VIDEO_STREAM(struct soap *soap, struct ns__HBNET_VIDEO_STREAM **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__HBNET_VIDEO_STREAM(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag?tag:"QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag?tag:"string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */

/* soapPzServiceImplServiceSoapBindingProxy.cpp
   Generated by gSOAP 2.8.30 for BaseInterface.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapPzServiceImplServiceSoapBindingProxy.h"

PzServiceImplServiceSoapBindingProxy::PzServiceImplServiceSoapBindingProxy() : soap(SOAP_IO_DEFAULT)
{	PzServiceImplServiceSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

PzServiceImplServiceSoapBindingProxy::PzServiceImplServiceSoapBindingProxy(const PzServiceImplServiceSoapBindingProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

PzServiceImplServiceSoapBindingProxy::PzServiceImplServiceSoapBindingProxy(const struct soap &_soap) : soap(_soap)
{ }

PzServiceImplServiceSoapBindingProxy::PzServiceImplServiceSoapBindingProxy(const char *endpoint) : soap(SOAP_IO_DEFAULT)
{	PzServiceImplServiceSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

PzServiceImplServiceSoapBindingProxy::PzServiceImplServiceSoapBindingProxy(soap_mode iomode) : soap(iomode)
{	PzServiceImplServiceSoapBindingProxy_init(iomode, iomode);
}

PzServiceImplServiceSoapBindingProxy::PzServiceImplServiceSoapBindingProxy(const char *endpoint, soap_mode iomode) : soap(iomode)
{	PzServiceImplServiceSoapBindingProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

PzServiceImplServiceSoapBindingProxy::PzServiceImplServiceSoapBindingProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	PzServiceImplServiceSoapBindingProxy_init(imode, omode);
}

PzServiceImplServiceSoapBindingProxy::~PzServiceImplServiceSoapBindingProxy()
{
	this->destroy();
	}

void PzServiceImplServiceSoapBindingProxy::PzServiceImplServiceSoapBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns", "http://haibogroup.com.cn", NULL, NULL},
        {"ns1", "http://servlet.manage.haibo.com", NULL, NULL},
        {"nsCXF", "http://servlet.webservice.skynet.botech.com/", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
PzServiceImplServiceSoapBindingProxy *PzServiceImplServiceSoapBindingProxy::copy()
{	PzServiceImplServiceSoapBindingProxy *dup = SOAP_NEW_COPY(PzServiceImplServiceSoapBindingProxy(*(struct soap*)this));
	return dup;
}
#endif

PzServiceImplServiceSoapBindingProxy& PzServiceImplServiceSoapBindingProxy::operator=(const PzServiceImplServiceSoapBindingProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void PzServiceImplServiceSoapBindingProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void PzServiceImplServiceSoapBindingProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	PzServiceImplServiceSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void PzServiceImplServiceSoapBindingProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *PzServiceImplServiceSoapBindingProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *PzServiceImplServiceSoapBindingProxy::soap_fault()
{	return this->fault;
}

const char *PzServiceImplServiceSoapBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *PzServiceImplServiceSoapBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int PzServiceImplServiceSoapBindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

int PzServiceImplServiceSoapBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void PzServiceImplServiceSoapBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void PzServiceImplServiceSoapBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *PzServiceImplServiceSoapBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int PzServiceImplServiceSoapBindingProxy::getDataCxf(const char *endpoint, const char *soap_action, nsCXF__getDataCxf *nsCXF__getDataCxf_, nsCXF__getDataCxfResponse *nsCXF__getDataCxfResponse_)
{	struct soap *soap = this;
	struct __nsCXF__getDataCxf soap_tmp___nsCXF__getDataCxf;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp___nsCXF__getDataCxf.nsCXF__getDataCxf_ = nsCXF__getDataCxf_;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___nsCXF__getDataCxf(soap, &soap_tmp___nsCXF__getDataCxf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___nsCXF__getDataCxf(soap, &soap_tmp___nsCXF__getDataCxf, "-nsCXF:getDataCxf", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___nsCXF__getDataCxf(soap, &soap_tmp___nsCXF__getDataCxf, "-nsCXF:getDataCxf", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!nsCXF__getDataCxfResponse_)
		return soap_closesock(soap);
	nsCXF__getDataCxfResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	nsCXF__getDataCxfResponse_->soap_get(soap, "nsCXF:getDataCxfResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
